// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: simple.proto

/*
Package prototests is a generated protocol buffer package.

It is generated from these files:
	simple.proto

It has these top-level messages:
	Simple
	Nested
*/
package prototests

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Simple struct {
	Field1           *float64  `protobuf:"fixed64,1,opt,name=Field1" json:"Field1,omitempty"`
	Field2           *float32  `protobuf:"fixed32,2,opt,name=Field2" json:"Field2,omitempty"`
	Field3           *int32    `protobuf:"varint,3,opt,name=Field3" json:"Field3,omitempty"`
	Field4           *int64    `protobuf:"varint,4,opt,name=Field4" json:"Field4,omitempty"`
	Field5           *uint32   `protobuf:"varint,5,opt,name=Field5" json:"Field5,omitempty"`
	Field6           *uint64   `protobuf:"varint,6,opt,name=Field6" json:"Field6,omitempty"`
	Field7           *int32    `protobuf:"zigzag32,7,opt,name=Field7" json:"Field7,omitempty"`
	Field8           *int64    `protobuf:"zigzag64,8,opt,name=Field8" json:"Field8,omitempty"`
	Field9           *uint32   `protobuf:"fixed32,9,opt,name=Field9" json:"Field9,omitempty"`
	Field10          *int32    `protobuf:"fixed32,10,opt,name=Field10" json:"Field10,omitempty"`
	Field11          *uint64   `protobuf:"fixed64,11,opt,name=Field11" json:"Field11,omitempty"`
	Field12          *int64    `protobuf:"fixed64,12,opt,name=Field12" json:"Field12,omitempty"`
	Field13          *bool     `protobuf:"varint,13,opt,name=Field13" json:"Field13,omitempty"`
	Field14          *string   `protobuf:"bytes,14,opt,name=Field14" json:"Field14,omitempty"`
	Field15          []byte    `protobuf:"bytes,15,opt,name=Field15" json:"Field15,omitempty"`
	Fields1          []float64 `protobuf:"fixed64,21,rep,name=Fields1" json:"Fields1,omitempty"`
	Fields2          []float32 `protobuf:"fixed32,22,rep,name=Fields2" json:"Fields2,omitempty"`
	Fields3          []int32   `protobuf:"varint,23,rep,name=Fields3" json:"Fields3,omitempty"`
	Fields4          []int64   `protobuf:"varint,24,rep,name=Fields4" json:"Fields4,omitempty"`
	Fields5          []uint32  `protobuf:"varint,25,rep,name=Fields5" json:"Fields5,omitempty"`
	Fields6          []uint64  `protobuf:"varint,26,rep,name=Fields6" json:"Fields6,omitempty"`
	Fields7          []int32   `protobuf:"zigzag32,27,rep,name=Fields7" json:"Fields7,omitempty"`
	Fields8          []int64   `protobuf:"zigzag64,28,rep,name=Fields8" json:"Fields8,omitempty"`
	Fields9          []uint32  `protobuf:"fixed32,29,rep,name=Fields9" json:"Fields9,omitempty"`
	Fields10         []int32   `protobuf:"fixed32,30,rep,name=Fields10" json:"Fields10,omitempty"`
	Fields11         []uint64  `protobuf:"fixed64,31,rep,name=Fields11" json:"Fields11,omitempty"`
	Fields12         []int64   `protobuf:"fixed64,32,rep,name=Fields12" json:"Fields12,omitempty"`
	Fields13         []bool    `protobuf:"varint,33,rep,name=Fields13" json:"Fields13,omitempty"`
	Fields14         []string  `protobuf:"bytes,34,rep,name=Fields14" json:"Fields14,omitempty"`
	Fields15         [][]byte  `protobuf:"bytes,35,rep,name=Fields15" json:"Fields15,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Simple) Reset()                    { *m = Simple{} }
func (m *Simple) String() string            { return proto.CompactTextString(m) }
func (*Simple) ProtoMessage()               {}
func (*Simple) Descriptor() ([]byte, []int) { return fileDescriptorSimple, []int{0} }

func (m *Simple) GetField1() float64 {
	if m != nil && m.Field1 != nil {
		return *m.Field1
	}
	return 0
}

func (m *Simple) GetField2() float32 {
	if m != nil && m.Field2 != nil {
		return *m.Field2
	}
	return 0
}

func (m *Simple) GetField3() int32 {
	if m != nil && m.Field3 != nil {
		return *m.Field3
	}
	return 0
}

func (m *Simple) GetField4() int64 {
	if m != nil && m.Field4 != nil {
		return *m.Field4
	}
	return 0
}

func (m *Simple) GetField5() uint32 {
	if m != nil && m.Field5 != nil {
		return *m.Field5
	}
	return 0
}

func (m *Simple) GetField6() uint64 {
	if m != nil && m.Field6 != nil {
		return *m.Field6
	}
	return 0
}

func (m *Simple) GetField7() int32 {
	if m != nil && m.Field7 != nil {
		return *m.Field7
	}
	return 0
}

func (m *Simple) GetField8() int64 {
	if m != nil && m.Field8 != nil {
		return *m.Field8
	}
	return 0
}

func (m *Simple) GetField9() uint32 {
	if m != nil && m.Field9 != nil {
		return *m.Field9
	}
	return 0
}

func (m *Simple) GetField10() int32 {
	if m != nil && m.Field10 != nil {
		return *m.Field10
	}
	return 0
}

func (m *Simple) GetField11() uint64 {
	if m != nil && m.Field11 != nil {
		return *m.Field11
	}
	return 0
}

func (m *Simple) GetField12() int64 {
	if m != nil && m.Field12 != nil {
		return *m.Field12
	}
	return 0
}

func (m *Simple) GetField13() bool {
	if m != nil && m.Field13 != nil {
		return *m.Field13
	}
	return false
}

func (m *Simple) GetField14() string {
	if m != nil && m.Field14 != nil {
		return *m.Field14
	}
	return ""
}

func (m *Simple) GetField15() []byte {
	if m != nil {
		return m.Field15
	}
	return nil
}

func (m *Simple) GetFields1() []float64 {
	if m != nil {
		return m.Fields1
	}
	return nil
}

func (m *Simple) GetFields2() []float32 {
	if m != nil {
		return m.Fields2
	}
	return nil
}

func (m *Simple) GetFields3() []int32 {
	if m != nil {
		return m.Fields3
	}
	return nil
}

func (m *Simple) GetFields4() []int64 {
	if m != nil {
		return m.Fields4
	}
	return nil
}

func (m *Simple) GetFields5() []uint32 {
	if m != nil {
		return m.Fields5
	}
	return nil
}

func (m *Simple) GetFields6() []uint64 {
	if m != nil {
		return m.Fields6
	}
	return nil
}

func (m *Simple) GetFields7() []int32 {
	if m != nil {
		return m.Fields7
	}
	return nil
}

func (m *Simple) GetFields8() []int64 {
	if m != nil {
		return m.Fields8
	}
	return nil
}

func (m *Simple) GetFields9() []uint32 {
	if m != nil {
		return m.Fields9
	}
	return nil
}

func (m *Simple) GetFields10() []int32 {
	if m != nil {
		return m.Fields10
	}
	return nil
}

func (m *Simple) GetFields11() []uint64 {
	if m != nil {
		return m.Fields11
	}
	return nil
}

func (m *Simple) GetFields12() []int64 {
	if m != nil {
		return m.Fields12
	}
	return nil
}

func (m *Simple) GetFields13() []bool {
	if m != nil {
		return m.Fields13
	}
	return nil
}

func (m *Simple) GetFields14() []string {
	if m != nil {
		return m.Fields14
	}
	return nil
}

func (m *Simple) GetFields15() [][]byte {
	if m != nil {
		return m.Fields15
	}
	return nil
}

type Nested struct {
	One              *Simple   `protobuf:"bytes,1,opt,name=One" json:"One,omitempty"`
	Many             []*Simple `protobuf:"bytes,2,rep,name=Many" json:"Many,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Nested) Reset()                    { *m = Nested{} }
func (m *Nested) String() string            { return proto.CompactTextString(m) }
func (*Nested) ProtoMessage()               {}
func (*Nested) Descriptor() ([]byte, []int) { return fileDescriptorSimple, []int{1} }

func (m *Nested) GetOne() *Simple {
	if m != nil {
		return m.One
	}
	return nil
}

func (m *Nested) GetMany() []*Simple {
	if m != nil {
		return m.Many
	}
	return nil
}

func init() {
	proto.RegisterType((*Simple)(nil), "prototests.Simple")
	proto.RegisterType((*Nested)(nil), "prototests.Nested")
}
func (this *Simple) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return SimpleDescription()
}
func (this *Nested) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return SimpleDescription()
}
func SimpleDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4021 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5b, 0x59, 0x70, 0x1c, 0xd7,
		0x75, 0xd5, 0xac, 0x98, 0xb9, 0x33, 0x98, 0x69, 0x3c, 0x80, 0x60, 0x13, 0x92, 0xc8, 0x21, 0xb4,
		0x8d, 0xa4, 0x18, 0x14, 0x41, 0x00, 0x24, 0x86, 0xb1, 0x95, 0x01, 0x30, 0x84, 0xc1, 0x00, 0x18,
		0xb8, 0x07, 0xd0, 0x62, 0x57, 0xaa, 0xab, 0xd1, 0xf3, 0x30, 0x68, 0xb2, 0xa7, 0xbb, 0xdd, 0xdd,
		0x43, 0x0a, 0xac, 0x7c, 0x28, 0xa5, 0x2c, 0xe5, 0x4a, 0xc5, 0x59, 0xab, 0x62, 0x2b, 0xb2, 0xb2,
		0x54, 0x25, 0x4a, 0x9c, 0xcd, 0x8e, 0x13, 0x67, 0xf9, 0xf2, 0x8f, 0x93, 0x7c, 0xa5, 0xca, 0xff,
		0xf9, 0x88, 0x13, 0x55, 0x65, 0x53, 0x62, 0x27, 0xd6, 0x87, 0xab, 0xf4, 0xe3, 0x7a, 0x5b, 0x77,
		0xcf, 0x02, 0xf6, 0xc0, 0x55, 0x92, 0xbf, 0x88, 0x77, 0xef, 0x3d, 0xa7, 0x6f, 0xdf, 0x77, 0xdf,
		0xbd, 0xef, 0xbd, 0x1e, 0xc2, 0x77, 0x56, 0xa1, 0xd2, 0xb1, 0xed, 0x8e, 0x89, 0xaf, 0x38, 0xae,
		0xed, 0xdb, 0x87, 0xbd, 0xa3, 0x2b, 0x6d, 0xec, 0xe9, 0xae, 0xe1, 0xf8, 0xb6, 0xbb, 0x40, 0x65,
		0xa8, 0xcc, 0x2c, 0x16, 0x84, 0xc5, 0xfc, 0x0e, 0x4c, 0xdd, 0x32, 0x4c, 0xbc, 0x11, 0x18, 0xb6,
		0xb0, 0x8f, 0x6e, 0x40, 0xfa, 0xc8, 0x30, 0xb1, 0x9c, 0xa8, 0xa4, 0xaa, 0x85, 0xc5, 0x27, 0x17,
		0x06, 0x40, 0x0b, 0xfd, 0x88, 0x3d, 0x22, 0x56, 0x28, 0x62, 0xfe, 0xdd, 0x34, 0x4c, 0x8f, 0xd0,
		0x22, 0x04, 0x69, 0x4b, 0xeb, 0x12, 0xc6, 0x44, 0x35, 0xaf, 0xd0, 0xbf, 0x91, 0x0c, 0x13, 0x8e,
		0xa6, 0xdf, 0xd5, 0x3a, 0x58, 0x4e, 0x52, 0xb1, 0x18, 0xa2, 0x8b, 0x00, 0x6d, 0xec, 0x60, 0xab,
		0x8d, 0x2d, 0xfd, 0x44, 0x4e, 0x55, 0x52, 0xd5, 0xbc, 0x12, 0x91, 0xa0, 0xe7, 0x61, 0xca, 0xe9,
		0x1d, 0x9a, 0x86, 0xae, 0x46, 0xcc, 0xa0, 0x92, 0xaa, 0x66, 0x14, 0x89, 0x29, 0x36, 0x42, 0xe3,
		0x67, 0xa0, 0x7c, 0x1f, 0x6b, 0x77, 0xa3, 0xa6, 0x05, 0x6a, 0x5a, 0x22, 0xe2, 0x88, 0xe1, 0x3a,
		0x14, 0xbb, 0xd8, 0xf3, 0xb4, 0x0e, 0x56, 0xfd, 0x13, 0x07, 0xcb, 0x69, 0xfa, 0xf6, 0x95, 0xa1,
		0xb7, 0x1f, 0x7c, 0xf3, 0x02, 0x47, 0xed, 0x9f, 0x38, 0x18, 0xd5, 0x21, 0x8f, 0xad, 0x5e, 0x97,
		0x31, 0x64, 0x4e, 0x89, 0x5f, 0xc3, 0xea, 0x75, 0x07, 0x59, 0x72, 0x04, 0xc6, 0x29, 0x26, 0x3c,
		0xec, 0xde, 0x33, 0x74, 0x2c, 0x67, 0x29, 0xc1, 0x33, 0x43, 0x04, 0x2d, 0xa6, 0x1f, 0xe4, 0x10,
		0x38, 0xb4, 0x0e, 0x79, 0xfc, 0x9a, 0x8f, 0x2d, 0xcf, 0xb0, 0x2d, 0x79, 0x82, 0x92, 0x3c, 0x35,
		0x62, 0x16, 0xb1, 0xd9, 0x1e, 0xa4, 0x08, 0x71, 0x68, 0x05, 0x26, 0x6c, 0xc7, 0x37, 0x6c, 0xcb,
		0x93, 0x73, 0x95, 0x44, 0xb5, 0xb0, 0xf8, 0xd8, 0xc8, 0x44, 0x68, 0x32, 0x1b, 0x45, 0x18, 0xa3,
		0x2d, 0x90, 0x3c, 0xbb, 0xe7, 0xea, 0x58, 0xd5, 0xed, 0x36, 0x56, 0x0d, 0xeb, 0xc8, 0x96, 0xf3,
		0x94, 0xe0, 0xd2, 0xf0, 0x8b, 0x50, 0xc3, 0x75, 0xbb, 0x8d, 0xb7, 0xac, 0x23, 0x5b, 0x29, 0x79,
		0x7d, 0x63, 0x34, 0x0b, 0x59, 0xef, 0xc4, 0xf2, 0xb5, 0xd7, 0xe4, 0x22, 0xcd, 0x10, 0x3e, 0x9a,
		0xff, 0xdb, 0x2c, 0x94, 0xc7, 0x49, 0xb1, 0x9b, 0x90, 0x39, 0x22, 0x6f, 0x29, 0x27, 0xcf, 0x12,
		0x03, 0x86, 0xe9, 0x0f, 0x62, 0xf6, 0x87, 0x0c, 0x62, 0x1d, 0x0a, 0x16, 0xf6, 0x7c, 0xdc, 0x66,
		0x19, 0x91, 0x1a, 0x33, 0xa7, 0x80, 0x81, 0x86, 0x53, 0x2a, 0xfd, 0x43, 0xa5, 0xd4, 0x2b, 0x50,
		0x0e, 0x5c, 0x52, 0x5d, 0xcd, 0xea, 0x88, 0xdc, 0xbc, 0x12, 0xe7, 0xc9, 0x42, 0x43, 0xe0, 0x14,
		0x02, 0x53, 0x4a, 0xb8, 0x6f, 0x8c, 0x36, 0x00, 0x6c, 0x0b, 0xdb, 0x47, 0x6a, 0x1b, 0xeb, 0xa6,
		0x9c, 0x3b, 0x25, 0x4a, 0x4d, 0x62, 0x32, 0x14, 0x25, 0x9b, 0x49, 0x75, 0x13, 0xad, 0x86, 0xa9,
		0x36, 0x71, 0x4a, 0xa6, 0xec, 0xb0, 0x45, 0x36, 0x94, 0x6d, 0x07, 0x50, 0x72, 0x31, 0xc9, 0x7b,
		0xdc, 0xe6, 0x6f, 0x96, 0xa7, 0x4e, 0x2c, 0xc4, 0xbe, 0x99, 0xc2, 0x61, 0xec, 0xc5, 0x26, 0xdd,
		0xe8, 0x10, 0x3d, 0x01, 0x81, 0x40, 0xa5, 0x69, 0x05, 0xb4, 0x0a, 0x15, 0x85, 0x70, 0x57, 0xeb,
		0xe2, 0xb9, 0x07, 0x50, 0xea, 0x0f, 0x0f, 0x9a, 0x81, 0x8c, 0xe7, 0x6b, 0xae, 0x4f, 0xb3, 0x30,
		0xa3, 0xb0, 0x01, 0x92, 0x20, 0x85, 0xad, 0x36, 0xad, 0x72, 0x19, 0x85, 0xfc, 0x89, 0x7e, 0x22,
		0x7c, 0xe1, 0x14, 0x7d, 0xe1, 0xa7, 0x87, 0x67, 0xb4, 0x8f, 0x79, 0xf0, 0xbd, 0xe7, 0xae, 0xc3,
		0x64, 0xdf, 0x0b, 0x8c, 0xfb, 0xe8, 0xf9, 0x9f, 0x86, 0x73, 0x23, 0xa9, 0xd1, 0x2b, 0x30, 0xd3,
		0xb3, 0x0c, 0xcb, 0xc7, 0xae, 0xe3, 0x62, 0x92, 0xb1, 0xec, 0x51, 0xf2, 0xbf, 0x4f, 0x9c, 0x92,
		0x73, 0x07, 0x51, 0x6b, 0xc6, 0xa2, 0x4c, 0xf7, 0x86, 0x85, 0xcf, 0xe5, 0x73, 0xff, 0x31, 0x21,
		0xbd, 0xfe, 0xfa, 0xeb, 0xaf, 0x27, 0xe7, 0xbf, 0x90, 0x85, 0x99, 0x51, 0x6b, 0x66, 0xe4, 0xf2,
		0x9d, 0x85, 0xac, 0xd5, 0xeb, 0x1e, 0x62, 0x97, 0x06, 0x29, 0xa3, 0xf0, 0x11, 0xaa, 0x43, 0xc6,
		0xd4, 0x0e, 0xb1, 0x29, 0xa7, 0x2b, 0x89, 0x6a, 0x69, 0xf1, 0xf9, 0xb1, 0x56, 0xe5, 0xc2, 0x36,
		0x81, 0x28, 0x0c, 0x89, 0x3e, 0x01, 0x69, 0x5e, 0xa2, 0x09, 0xc3, 0x73, 0xe3, 0x31, 0x90, 0xb5,
		0xa4, 0x50, 0x1c, 0x7a, 0x14, 0xf2, 0xe4, 0x5f, 0x96, 0x1b, 0x59, 0xea, 0x73, 0x8e, 0x08, 0x48,
		0x5e, 0xa0, 0x39, 0xc8, 0xd1, 0x65, 0xd2, 0xc6, 0xa2, 0xb5, 0x05, 0x63, 0x92, 0x58, 0x6d, 0x7c,
		0xa4, 0xf5, 0x4c, 0x5f, 0xbd, 0xa7, 0x99, 0x3d, 0x4c, 0x13, 0x3e, 0xaf, 0x14, 0xb9, 0xf0, 0x25,
		0x22, 0x43, 0x97, 0xa0, 0xc0, 0x56, 0x95, 0x61, 0xb5, 0xf1, 0x6b, 0xb4, 0x7a, 0x66, 0x14, 0xb6,
		0xd0, 0xb6, 0x88, 0x84, 0x3c, 0xfe, 0x8e, 0x67, 0x5b, 0x22, 0x35, 0xe9, 0x23, 0x88, 0x80, 0x3e,
		0xfe, 0xfa, 0x60, 0xe1, 0x7e, 0x7c, 0xf4, 0xeb, 0x0d, 0xe6, 0xd4, 0xfc, 0xd7, 0x93, 0x90, 0xa6,
		0xf5, 0xa2, 0x0c, 0x85, 0xfd, 0x57, 0xf7, 0x1a, 0xea, 0x46, 0xf3, 0x60, 0x6d, 0xbb, 0x21, 0x25,
		0x50, 0x09, 0x80, 0x0a, 0x6e, 0x6d, 0x37, 0xeb, 0xfb, 0x52, 0x32, 0x18, 0x6f, 0xed, 0xee, 0xaf,
		0x2c, 0x49, 0xa9, 0x00, 0x70, 0xc0, 0x04, 0xe9, 0xa8, 0xc1, 0xb5, 0x45, 0x29, 0x83, 0x24, 0x28,
		0x32, 0x82, 0xad, 0x57, 0x1a, 0x1b, 0x2b, 0x4b, 0x52, 0xb6, 0x5f, 0x72, 0x6d, 0x51, 0x9a, 0x40,
		0x93, 0x90, 0xa7, 0x92, 0xb5, 0x66, 0x73, 0x5b, 0xca, 0x05, 0x9c, 0xad, 0x7d, 0x65, 0x6b, 0x77,
		0x53, 0xca, 0x07, 0x9c, 0x9b, 0x4a, 0xf3, 0x60, 0x4f, 0x82, 0x80, 0x61, 0xa7, 0xd1, 0x6a, 0xd5,
		0x37, 0x1b, 0x52, 0x21, 0xb0, 0x58, 0x7b, 0x75, 0xbf, 0xd1, 0x92, 0x8a, 0x7d, 0x6e, 0x5d, 0x5b,
		0x94, 0x26, 0x83, 0x47, 0x34, 0x76, 0x0f, 0x76, 0xa4, 0x12, 0x9a, 0x82, 0x49, 0xf6, 0x08, 0xe1,
		0x44, 0x79, 0x40, 0xb4, 0xb2, 0x24, 0x49, 0xa1, 0x23, 0x8c, 0x65, 0xaa, 0x4f, 0xb0, 0xb2, 0x24,
		0xa1, 0xf9, 0x75, 0xc8, 0xd0, 0xec, 0x42, 0x08, 0x4a, 0xdb, 0xf5, 0xb5, 0xc6, 0xb6, 0xda, 0xdc,
		0xdb, 0xdf, 0x6a, 0xee, 0xd6, 0xb7, 0xa5, 0x44, 0x28, 0x53, 0x1a, 0x9f, 0x3a, 0xd8, 0x52, 0x1a,
		0x1b, 0x52, 0x32, 0x2a, 0xdb, 0x6b, 0xd4, 0xf7, 0x1b, 0x1b, 0x52, 0x6a, 0x5e, 0x87, 0x99, 0x51,
		0x75, 0x72, 0xe4, 0xca, 0x88, 0x4c, 0x71, 0xf2, 0x94, 0x29, 0xa6, 0x5c, 0x43, 0x53, 0xfc, 0x6f,
		0x49, 0x98, 0x1e, 0xd1, 0x2b, 0x46, 0x3e, 0xe4, 0x45, 0xc8, 0xb0, 0x14, 0x65, 0xdd, 0xf3, 0xd9,
		0x91, 0x4d, 0x87, 0x26, 0xec, 0x50, 0x07, 0xa5, 0xb8, 0xe8, 0x0e, 0x22, 0x75, 0xca, 0x0e, 0x82,
		0x50, 0x0c, 0xd5, 0xf4, 0x9f, 0x1a, 0xaa, 0xe9, 0xac, 0xed, 0xad, 0x8c, 0xd3, 0xf6, 0xa8, 0xec,
		0x6c, 0xb5, 0x3d, 0x33, 0xa2, 0xb6, 0xdf, 0x84, 0xa9, 0x21, 0xa2, 0xb1, 0x6b, 0xec, 0x1b, 0x09,
		0x90, 0x4f, 0x0b, 0x4e, 0x4c, 0xa5, 0x4b, 0xf6, 0x55, 0xba, 0x9b, 0x83, 0x11, 0xbc, 0x7c, 0xfa,
		0x24, 0x0c, 0xcd, 0xf5, 0x3b, 0x09, 0x98, 0x1d, 0xbd, 0x53, 0x1c, 0xe9, 0xc3, 0x27, 0x20, 0xdb,
		0xc5, 0xfe, 0xb1, 0x2d, 0x76, 0x4b, 0x4f, 0x8f, 0xe8, 0xc1, 0x44, 0x3d, 0x38, 0xd9, 0x1c, 0x15,
		0x6d, 0xe2, 0xa9, 0xd3, 0xb6, 0x7b, 0xcc, 0x9b, 0x21, 0x4f, 0x3f, 0x97, 0x84, 0x73, 0x23, 0xc9,
		0x47, 0x3a, 0xfa, 0x38, 0x80, 0x61, 0x39, 0x3d, 0x9f, 0xed, 0x88, 0x58, 0x81, 0xcd, 0x53, 0x09,
		0x2d, 0x5e, 0xa4, 0x78, 0xf6, 0xfc, 0x40, 0x9f, 0xa2, 0x7a, 0x60, 0x22, 0x6a, 0x70, 0x23, 0x74,
		0x34, 0x4d, 0x1d, 0xbd, 0x78, 0xca, 0x9b, 0x0e, 0x25, 0xe6, 0x0b, 0x20, 0xe9, 0xa6, 0x81, 0x2d,
		0x5f, 0xf5, 0x7c, 0x17, 0x6b, 0x5d, 0xc3, 0xea, 0xd0, 0x0e, 0x92, 0xab, 0x65, 0x8e, 0x34, 0xd3,
		0xc3, 0x4a, 0x99, 0xa9, 0x5b, 0x42, 0x4b, 0x10, 0x34, 0x81, 0xdc, 0x08, 0x22, 0xdb, 0x87, 0x60,
		0xea, 0x00, 0x31, 0xff, 0xb5, 0x1c, 0x14, 0x22, 0xfb, 0x6a, 0x74, 0x19, 0x8a, 0x77, 0xb4, 0x7b,
		0x9a, 0x2a, 0xce, 0x4a, 0x2c, 0x12, 0x05, 0x22, 0xdb, 0xe3, 0xe7, 0xa5, 0x17, 0x60, 0x86, 0x9a,
		0xd8, 0x3d, 0x1f, 0xbb, 0xaa, 0x6e, 0x6a, 0x9e, 0x47, 0x83, 0x96, 0xa3, 0xa6, 0x88, 0xe8, 0x9a,
		0x44, 0xb5, 0x2e, 0x34, 0x68, 0x19, 0xa6, 0x29, 0xa2, 0xdb, 0x33, 0x7d, 0xc3, 0x31, 0xb1, 0x4a,
		0x4e, 0x6f, 0x1e, 0xed, 0x24, 0x81, 0x67, 0x53, 0xc4, 0x62, 0x87, 0x1b, 0x10, 0x8f, 0x3c, 0xb4,
		0x01, 0x8f, 0x53, 0x58, 0x07, 0x5b, 0xd8, 0xd5, 0x7c, 0xac, 0xe2, 0xcf, 0xf6, 0x34, 0xd3, 0x53,
		0x35, 0xab, 0xad, 0x1e, 0x6b, 0xde, 0xb1, 0x3c, 0x43, 0x08, 0xd6, 0x92, 0x72, 0x42, 0xb9, 0x40,
		0x0c, 0x37, 0xb9, 0x5d, 0x83, 0x9a, 0xd5, 0xad, 0xf6, 0x27, 0x35, 0xef, 0x18, 0xd5, 0x60, 0x96,
		0xb2, 0x78, 0xbe, 0x6b, 0x58, 0x1d, 0x55, 0x3f, 0xc6, 0xfa, 0x5d, 0xb5, 0xe7, 0x1f, 0xdd, 0x90,
		0x1f, 0x8d, 0x3e, 0x9f, 0x7a, 0xd8, 0xa2, 0x36, 0xeb, 0xc4, 0xe4, 0xc0, 0x3f, 0xba, 0x81, 0x5a,
		0x50, 0x24, 0x93, 0xd1, 0x35, 0x1e, 0x60, 0xf5, 0xc8, 0x76, 0x69, 0x6b, 0x2c, 0x8d, 0x28, 0x4d,
		0x91, 0x08, 0x2e, 0x34, 0x39, 0x60, 0xc7, 0x6e, 0xe3, 0x5a, 0xa6, 0xb5, 0xd7, 0x68, 0x6c, 0x28,
		0x05, 0xc1, 0x72, 0xcb, 0x76, 0x49, 0x42, 0x75, 0xec, 0x20, 0xc0, 0x05, 0x96, 0x50, 0x1d, 0x5b,
		0x84, 0x77, 0x19, 0xa6, 0x75, 0x9d, 0xbd, 0xb3, 0xa1, 0xab, 0xfc, 0x8c, 0xe5, 0xc9, 0x52, 0x5f,
		0xb0, 0x74, 0x7d, 0x93, 0x19, 0xf0, 0x1c, 0xf7, 0xd0, 0x2a, 0x9c, 0x0b, 0x83, 0x15, 0x05, 0x4e,
		0x0d, 0xbd, 0xe5, 0x20, 0x74, 0x19, 0xa6, 0x9d, 0x93, 0x61, 0x20, 0xea, 0x7b, 0xa2, 0x73, 0x32,
		0x08, 0xbb, 0x0e, 0x33, 0xce, 0xb1, 0x33, 0x8c, 0x7b, 0x2e, 0x8a, 0x43, 0xce, 0xb1, 0x33, 0x08,
		0x7c, 0x8a, 0x1e, 0xb8, 0x5d, 0xac, 0x6b, 0x3e, 0x6e, 0xcb, 0xe7, 0xa3, 0xe6, 0x11, 0x05, 0xba,
		0x02, 0x92, 0xae, 0xab, 0xd8, 0xd2, 0x0e, 0x4d, 0xac, 0x6a, 0x2e, 0xb6, 0x34, 0x4f, 0xbe, 0x14,
		0x35, 0x2e, 0xe9, 0x7a, 0x83, 0x6a, 0xeb, 0x54, 0x89, 0x9e, 0x83, 0x29, 0xfb, 0xf0, 0x8e, 0xce,
		0x52, 0x52, 0x75, 0x5c, 0x7c, 0x64, 0xbc, 0x26, 0x3f, 0x49, 0xe3, 0x5b, 0x26, 0x0a, 0x9a, 0x90,
		0x7b, 0x54, 0x8c, 0x9e, 0x05, 0x49, 0xf7, 0x8e, 0x35, 0xd7, 0xa1, 0x35, 0xd9, 0x73, 0x34, 0x1d,
		0xcb, 0x4f, 0x31, 0x53, 0x26, 0xdf, 0x15, 0x62, 0xb2, 0x24, 0xbc, 0xfb, 0xc6, 0x91, 0x2f, 0x18,
		0x9f, 0x61, 0x4b, 0x82, 0xca, 0x38, 0x5b, 0x15, 0x24, 0x12, 0x8a, 0xbe, 0x07, 0x57, 0xa9, 0x59,
		0xc9, 0x39, 0x76, 0xa2, 0xcf, 0x7d, 0x02, 0x26, 0x89, 0x65, 0xf8, 0xd0, 0x67, 0xd9, 0x86, 0xcc,
		0x39, 0x8e, 0x3c, 0xf1, 0x43, 0xdb, 0x1b, 0xcf, 0xd7, 0xa0, 0x18, 0xcd, 0x4f, 0x94, 0x07, 0x96,
		0xa1, 0x52, 0x82, 0x6c, 0x56, 0xd6, 0x9b, 0x1b, 0x64, 0x9b, 0xf1, 0xe9, 0x86, 0x94, 0x24, 0xdb,
		0x9d, 0xed, 0xad, 0xfd, 0x86, 0xaa, 0x1c, 0xec, 0xee, 0x6f, 0xed, 0x34, 0xa4, 0x54, 0x74, 0x5f,
		0xfd, 0xcd, 0x24, 0x94, 0xfa, 0x8f, 0x48, 0xe8, 0xc7, 0xe1, 0xbc, 0xb8, 0xcf, 0xf0, 0xb0, 0xaf,
		0xde, 0x37, 0x5c, 0xba, 0x64, 0xba, 0x1a, 0x6b, 0x5f, 0xc1, 0xa4, 0xcd, 0x70, 0xab, 0x16, 0xf6,
		0x5f, 0x36, 0x5c, 0xb2, 0x20, 0xba, 0x9a, 0x8f, 0xb6, 0xe1, 0x92, 0x65, 0xab, 0x9e, 0xaf, 0x59,
		0x6d, 0xcd, 0x6d, 0xab, 0xe1, 0x4d, 0x92, 0xaa, 0xe9, 0x3a, 0xf6, 0x3c, 0x9b, 0xb5, 0xaa, 0x80,
		0xe5, 0x31, 0xcb, 0x6e, 0x71, 0xe3, 0xb0, 0x86, 0xd7, 0xb9, 0xe9, 0x40, 0x82, 0xa5, 0x4e, 0x4b,
		0xb0, 0x47, 0x21, 0xdf, 0xd5, 0x1c, 0x15, 0x5b, 0xbe, 0x7b, 0x42, 0x37, 0xc6, 0x39, 0x25, 0xd7,
		0xd5, 0x9c, 0x06, 0x19, 0x7f, 0x34, 0xe7, 0x93, 0x7f, 0x4e, 0x41, 0x31, 0xba, 0x39, 0x26, 0x67,
		0x0d, 0x9d, 0xf6, 0x91, 0x04, 0xad, 0x34, 0x4f, 0x3c, 0x74, 0x2b, 0xbd, 0xb0, 0x4e, 0x1a, 0x4c,
		0x2d, 0xcb, 0xb6, 0xac, 0x0a, 0x43, 0x92, 0xe6, 0x4e, 0x6a, 0x0b, 0x66, 0x5b, 0x84, 0x9c, 0xc2,
		0x47, 0x68, 0x13, 0xb2, 0x77, 0x3c, 0xca, 0x9d, 0xa5, 0xdc, 0x4f, 0x3e, 0x9c, 0xfb, 0x76, 0x8b,
		0x92, 0xe7, 0x6f, 0xb7, 0xd4, 0xdd, 0xa6, 0xb2, 0x53, 0xdf, 0x56, 0x38, 0x1c, 0x5d, 0x80, 0xb4,
		0xa9, 0x3d, 0x38, 0xe9, 0x6f, 0x45, 0x54, 0x34, 0x6e, 0xe0, 0x2f, 0x40, 0xfa, 0x3e, 0xd6, 0xee,
		0xf6, 0x37, 0x00, 0x2a, 0xfa, 0x10, 0x53, 0xff, 0x0a, 0x64, 0x68, 0xbc, 0x10, 0x00, 0x8f, 0x98,
		0xf4, 0x08, 0xca, 0x41, 0x7a, 0xbd, 0xa9, 0x90, 0xf4, 0x97, 0xa0, 0xc8, 0xa4, 0xea, 0xde, 0x56,
		0x63, 0xbd, 0x21, 0x25, 0xe7, 0x97, 0x21, 0xcb, 0x82, 0x40, 0x96, 0x46, 0x10, 0x06, 0xe9, 0x11,
		0x3e, 0xe4, 0x1c, 0x09, 0xa1, 0x3d, 0xd8, 0x59, 0x6b, 0x28, 0x52, 0x32, 0x3a, 0xbd, 0x1e, 0x14,
		0xa3, 0xfb, 0xe2, 0x8f, 0x26, 0xa7, 0xfe, 0x2e, 0x01, 0x85, 0xc8, 0x3e, 0x97, 0x6c, 0x50, 0x34,
		0xd3, 0xb4, 0xef, 0xab, 0x9a, 0x69, 0x68, 0x1e, 0x4f, 0x0a, 0xa0, 0xa2, 0x3a, 0x91, 0x8c, 0x3b,
		0x69, 0x1f, 0x89, 0xf3, 0x6f, 0x27, 0x40, 0x1a, 0xdc, 0x62, 0x0e, 0x38, 0x98, 0xf8, 0x91, 0x3a,
		0xf8, 0x56, 0x02, 0x4a, 0xfd, 0xfb, 0xca, 0x01, 0xf7, 0x2e, 0xff, 0x48, 0xdd, 0xfb, 0x97, 0x24,
		0x4c, 0xf6, 0xed, 0x26, 0xc7, 0xf5, 0xee, 0xb3, 0x30, 0x65, 0xb4, 0x71, 0xd7, 0xb1, 0x7d, 0x6c,
		0xe9, 0x27, 0xaa, 0x89, 0xef, 0x61, 0x53, 0x9e, 0xa7, 0x85, 0xe2, 0xca, 0xc3, 0xf7, 0xab, 0x0b,
		0x5b, 0x21, 0x6e, 0x9b, 0xc0, 0x6a, 0xd3, 0x5b, 0x1b, 0x8d, 0x9d, 0xbd, 0xe6, 0x7e, 0x63, 0x77,
		0xfd, 0x55, 0xf5, 0x60, 0xf7, 0x27, 0x77, 0x9b, 0x2f, 0xef, 0x2a, 0x92, 0x31, 0x60, 0xf6, 0x21,
		0x2e, 0xf5, 0x3d, 0x90, 0x06, 0x9d, 0x42, 0xe7, 0x61, 0x94, 0x5b, 0xd2, 0x23, 0x68, 0x1a, 0xca,
		0xbb, 0x4d, 0xb5, 0xb5, 0xb5, 0xd1, 0x50, 0x1b, 0xb7, 0x6e, 0x35, 0xd6, 0xf7, 0x5b, 0xec, 0x06,
		0x22, 0xb0, 0xde, 0xef, 0x5f, 0xd4, 0x6f, 0xa6, 0x60, 0x7a, 0x84, 0x27, 0xa8, 0xce, 0xcf, 0x0e,
		0xec, 0x38, 0xf3, 0xb1, 0x71, 0xbc, 0x5f, 0x20, 0x2d, 0x7f, 0x4f, 0x73, 0x7d, 0x7e, 0xd4, 0x78,
		0x16, 0x48, 0x94, 0x2c, 0xdf, 0x38, 0x32, 0xb0, 0xcb, 0x2f, 0x6c, 0xd8, 0x81, 0xa2, 0x1c, 0xca,
		0xd9, 0x9d, 0xcd, 0x8f, 0x01, 0x72, 0x6c, 0xcf, 0xf0, 0x8d, 0x7b, 0x58, 0x35, 0x2c, 0x71, 0xbb,
		0x43, 0x0e, 0x18, 0x69, 0x45, 0x12, 0x9a, 0x2d, 0xcb, 0x0f, 0xac, 0x2d, 0xdc, 0xd1, 0x06, 0xac,
		0x49, 0x01, 0x4f, 0x29, 0x92, 0xd0, 0x04, 0xd6, 0x97, 0xa1, 0xd8, 0xb6, 0x7b, 0x64, 0xd7, 0xc5,
		0xec, 0x48, 0xbf, 0x48, 0x28, 0x05, 0x26, 0x0b, 0x4c, 0xf8, 0x7e, 0x3a, 0xbc, 0x56, 0x2a, 0x2a,
		0x05, 0x26, 0x63, 0x26, 0xcf, 0x40, 0x59, 0xeb, 0x74, 0x5c, 0x42, 0x2e, 0x88, 0xd8, 0x09, 0xa1,
		0x14, 0x88, 0xa9, 0xe1, 0xdc, 0x6d, 0xc8, 0x89, 0x38, 0x90, 0x96, 0x4c, 0x22, 0xa1, 0x3a, 0xec,
		0xd8, 0x9b, 0xac, 0xe6, 0x95, 0x9c, 0x25, 0x94, 0x97, 0xa1, 0x68, 0x78, 0x6a, 0x78, 0x4b, 0x9e,
		0xac, 0x24, 0xab, 0x39, 0xa5, 0x60, 0x78, 0xc1, 0x0d, 0xe3, 0xfc, 0x3b, 0x49, 0x28, 0xf5, 0xdf,
		0xf2, 0xa3, 0x0d, 0xc8, 0x99, 0xb6, 0xae, 0xd1, 0xd4, 0x62, 0x9f, 0x98, 0xaa, 0x31, 0x1f, 0x06,
		0x16, 0xb6, 0xb9, 0xbd, 0x12, 0x20, 0xe7, 0xfe, 0x29, 0x01, 0x39, 0x21, 0x46, 0xb3, 0x90, 0x76,
		0x34, 0xff, 0x98, 0xd2, 0x65, 0xd6, 0x92, 0x52, 0x42, 0xa1, 0x63, 0x22, 0xf7, 0x1c, 0xcd, 0xa2,
		0x29, 0xc0, 0xe5, 0x64, 0x4c, 0xe6, 0xd5, 0xc4, 0x5a, 0x9b, 0x1e, 0x3f, 0xec, 0x6e, 0x17, 0x5b,
		0xbe, 0x27, 0xe6, 0x95, 0xcb, 0xd7, 0xb9, 0x18, 0x3d, 0x0f, 0x53, 0xbe, 0xab, 0x19, 0x66, 0x9f,
		0x6d, 0x9a, 0xda, 0x4a, 0x42, 0x11, 0x18, 0xd7, 0xe0, 0x82, 0xe0, 0x6d, 0x63, 0x5f, 0xd3, 0x8f,
		0x71, 0x3b, 0x04, 0x65, 0xe9, 0x35, 0xc3, 0x79, 0x6e, 0xb0, 0xc1, 0xf5, 0x02, 0x3b, 0xff, 0xad,
		0x04, 0x4c, 0x89, 0x03, 0x53, 0x3b, 0x08, 0xd6, 0x0e, 0x80, 0x66, 0x59, 0xb6, 0x1f, 0x0d, 0xd7,
		0x70, 0x2a, 0x0f, 0xe1, 0x16, 0xea, 0x01, 0x48, 0x89, 0x10, 0xcc, 0x75, 0x01, 0x42, 0xcd, 0xa9,
		0x61, 0xbb, 0x04, 0x05, 0xfe, 0x09, 0x87, 0x7e, 0x07, 0x64, 0x47, 0x6c, 0x60, 0x22, 0x72, 0xb2,
		0x42, 0x33, 0x90, 0x39, 0xc4, 0x1d, 0xc3, 0xe2, 0x17, 0xb3, 0x6c, 0x20, 0x2e, 0x42, 0xd2, 0xc1,
		0x45, 0xc8, 0xda, 0x67, 0x60, 0x5a, 0xb7, 0xbb, 0x83, 0xee, 0xae, 0x49, 0x03, 0xc7, 0x7c, 0xef,
		0x93, 0x89, 0x4f, 0x43, 0xb8, 0xc5, 0xfc, 0x7e, 0x22, 0xf1, 0x7b, 0xc9, 0xd4, 0xe6, 0xde, 0xda,
		0x97, 0x93, 0x73, 0x9b, 0x0c, 0xba, 0x27, 0xde, 0x54, 0xc1, 0x47, 0x26, 0xd6, 0x89, 0xf7, 0xf0,
		0xbd, 0xa7, 0xe1, 0x63, 0x1d, 0xc3, 0x3f, 0xee, 0x1d, 0x2e, 0xe8, 0x76, 0xf7, 0x4a, 0xc7, 0xee,
		0xd8, 0xe1, 0xa7, 0x4f, 0x32, 0xa2, 0x03, 0xfa, 0x17, 0xff, 0xfc, 0x99, 0x0f, 0xa4, 0x73, 0xb1,
		0xdf, 0x4a, 0x6b, 0xbb, 0x30, 0xcd, 0x8d, 0x55, 0xfa, 0xfd, 0x85, 0x9d, 0x22, 0xd0, 0x43, 0xef,
		0xb0, 0xe4, 0xaf, 0xbe, 0x4b, 0xdb, 0xb5, 0x32, 0xc5, 0xa1, 0x44, 0xc7, 0x0e, 0x1a, 0x35, 0x05,
		0xce, 0xf5, 0xf1, 0xb1, 0xa5, 0x89, 0xdd, 0x18, 0xc6, 0x6f, 0x72, 0xc6, 0xe9, 0x08, 0x63, 0x8b,
		0x43, 0x6b, 0xeb, 0x30, 0x79, 0x16, 0xae, 0xbf, 0xe7, 0x5c, 0x45, 0x1c, 0x25, 0xd9, 0x84, 0x32,
		0x25, 0xd1, 0x7b, 0x9e, 0x6f, 0x77, 0x69, 0xdd, 0x7b, 0x38, 0xcd, 0x3f, 0xbc, 0xcb, 0xd6, 0x4a,
		0x89, 0xc0, 0xd6, 0x03, 0x54, 0xad, 0x06, 0xf4, 0x93, 0x53, 0x1b, 0xeb, 0x66, 0x0c, 0xc3, 0x3f,
		0x72, 0x47, 0x02, 0xfb, 0xda, 0x4b, 0x30, 0x43, 0xfe, 0xa6, 0x65, 0x29, 0xea, 0x49, 0xfc, 0x85,
		0x97, 0xfc, 0xad, 0x37, 0xd8, 0x72, 0x9c, 0x0e, 0x08, 0x22, 0x3e, 0x45, 0x66, 0xb1, 0x83, 0x7d,
		0x1f, 0xbb, 0x9e, 0xaa, 0x99, 0xa3, 0xdc, 0x8b, 0xdc, 0x18, 0xc8, 0x5f, 0x7c, 0xaf, 0x7f, 0x16,
		0x37, 0x19, 0xb2, 0x6e, 0x9a, 0xb5, 0x03, 0x38, 0x3f, 0x22, 0x2b, 0xc6, 0xe0, 0x7c, 0x93, 0x73,
		0xce, 0x0c, 0x65, 0x06, 0xa1, 0xdd, 0x03, 0x21, 0x0f, 0xe6, 0x72, 0x0c, 0xce, 0xdf, 0xe2, 0x9c,
		0x88, 0x63, 0xc5, 0x94, 0x12, 0xc6, 0xdb, 0x30, 0x75, 0x0f, 0xbb, 0x87, 0xb6, 0xc7, 0x6f, 0x69,
		0xc6, 0xa0, 0x7b, 0x8b, 0xd3, 0x95, 0x39, 0x90, 0x5e, 0xdb, 0x10, 0xae, 0x55, 0xc8, 0x1d, 0x69,
		0x3a, 0x1e, 0x83, 0xe2, 0x4b, 0x9c, 0x62, 0x82, 0xd8, 0x13, 0x68, 0x1d, 0x8a, 0x1d, 0x9b, 0x77,
		0xa6, 0x78, 0xf8, 0xdb, 0x1c, 0x5e, 0x10, 0x18, 0x4e, 0xe1, 0xd8, 0x4e, 0xcf, 0x24, 0x6d, 0x2b,
		0x9e, 0xe2, 0xb7, 0x05, 0x85, 0xc0, 0x70, 0x8a, 0x33, 0x84, 0xf5, 0x77, 0x04, 0x85, 0x17, 0x89,
		0xe7, 0x8b, 0x50, 0xb0, 0x2d, 0xf3, 0xc4, 0xb6, 0xc6, 0x71, 0xe2, 0x77, 0x39, 0x03, 0x70, 0x08,
		0x21, 0xb8, 0x09, 0xf9, 0x71, 0x27, 0xe2, 0xf7, 0xdf, 0x13, 0xcb, 0x43, 0xcc, 0xc0, 0x26, 0x94,
		0x45, 0x81, 0x32, 0x6c, 0x6b, 0x0c, 0x8a, 0x3f, 0xe0, 0x14, 0xa5, 0x08, 0x8c, 0xbf, 0x86, 0x8f,
		0x3d, 0xbf, 0x83, 0xc7, 0x21, 0x79, 0x47, 0xbc, 0x06, 0x87, 0xf0, 0x50, 0x1e, 0x62, 0x4b, 0x3f,
		0x1e, 0x8f, 0xe1, 0x0f, 0x45, 0x28, 0x05, 0x86, 0x50, 0xac, 0xc3, 0x64, 0x57, 0x73, 0xbd, 0x63,
		0xcd, 0x1c, 0x6b, 0x3a, 0xfe, 0x88, 0x73, 0x14, 0x03, 0x10, 0x8f, 0x48, 0xcf, 0x3a, 0x0b, 0xcd,
		0x97, 0x45, 0x44, 0x22, 0x30, 0xbe, 0xf4, 0x3c, 0x9f, 0x5e, 0x69, 0x9d, 0x85, 0xed, 0x8f, 0xc5,
		0xd2, 0x63, 0xd8, 0x9d, 0x28, 0xe3, 0x4d, 0xc8, 0x7b, 0xc6, 0x83, 0xb1, 0x68, 0xfe, 0x44, 0xcc,
		0x34, 0x05, 0x10, 0xf0, 0xab, 0x70, 0x61, 0x64, 0x9b, 0x18, 0x83, 0xec, 0x4f, 0x39, 0xd9, 0xec,
		0x88, 0x56, 0xc1, 0x4b, 0xc2, 0x59, 0x29, 0xff, 0x4c, 0x94, 0x04, 0x3c, 0xc0, 0xb5, 0x47, 0xce,
		0x0a, 0x9e, 0x76, 0x74, 0xb6, 0xa8, 0xfd, 0xb9, 0x88, 0x1a, 0xc3, 0xf6, 0x45, 0x6d, 0x1f, 0x66,
		0x39, 0xe3, 0xd9, 0xe6, 0xf5, 0x2b, 0xa2, 0xb0, 0x32, 0xf4, 0x41, 0xff, 0xec, 0x7e, 0x06, 0xe6,
		0x82, 0x70, 0x8a, 0x4d, 0xa9, 0xa7, 0x76, 0x35, 0x67, 0x0c, 0xe6, 0xaf, 0x72, 0x66, 0x51, 0xf1,
		0x83, 0x5d, 0xad, 0xb7, 0xa3, 0x39, 0x84, 0xfc, 0x15, 0x90, 0x05, 0x79, 0xcf, 0x72, 0xb1, 0x6e,
		0x77, 0x2c, 0xe3, 0x01, 0x6e, 0x8f, 0x41, 0xfd, 0x17, 0x03, 0x53, 0x75, 0x10, 0x81, 0x13, 0xe6,
		0x2d, 0x90, 0x82, 0xbd, 0x8a, 0x6a, 0x74, 0x1d, 0xdb, 0xf5, 0x63, 0x18, 0xbf, 0x26, 0x66, 0x2a,
		0xc0, 0x6d, 0x51, 0x58, 0xad, 0x01, 0x25, 0x3a, 0x1c, 0x37, 0x25, 0xff, 0x92, 0x13, 0x4d, 0x86,
		0x28, 0x5e, 0x38, 0x74, 0xbb, 0xeb, 0x68, 0xee, 0x38, 0xf5, 0xef, 0xaf, 0x44, 0xe1, 0xe0, 0x10,
		0x5e, 0x38, 0xfc, 0x13, 0x07, 0x93, 0x6e, 0x3f, 0x06, 0xc3, 0xd7, 0x45, 0xe1, 0x10, 0x18, 0x4e,
		0x21, 0x36, 0x0c, 0x63, 0x50, 0xfc, 0xb5, 0xa0, 0x10, 0x18, 0x42, 0xf1, 0xa9, 0xb0, 0xd1, 0xba,
		0xb8, 0x63, 0x78, 0xbe, 0xcb, 0xb6, 0xc2, 0x0f, 0xa7, 0xfa, 0x9b, 0xf7, 0xfa, 0x37, 0x61, 0x4a,
		0x04, 0x5a, 0xbb, 0x0d, 0xe5, 0x81, 0x2d, 0x06, 0x8a, 0xfb, 0xfd, 0x8a, 0xfc, 0x33, 0xef, 0xf3,
		0x62, 0xd4, 0xbf, 0xc3, 0xa8, 0x6d, 0x93, 0x79, 0xef, 0xdf, 0x07, 0xc4, 0x93, 0xbd, 0xf1, 0x7e,
		0x30, 0xf5, 0x7d, 0xdb, 0x80, 0xda, 0x2d, 0x98, 0xec, 0xdb, 0x03, 0xc4, 0x53, 0xfd, 0x2c, 0xa7,
		0x2a, 0x46, 0xb7, 0x00, 0xb5, 0x65, 0x48, 0x93, 0x7e, 0x1e, 0x0f, 0xff, 0x39, 0x0e, 0xa7, 0xe6,
		0xb5, 0x8f, 0x43, 0x4e, 0xf4, 0xf1, 0x78, 0xe8, 0xcf, 0x73, 0x68, 0x00, 0x21, 0x70, 0xd1, 0xc3,
		0xe3, 0xe1, 0xbf, 0x20, 0xe0, 0x02, 0x42, 0xe0, 0xe3, 0x87, 0xf0, 0x1b, 0xbf, 0x98, 0xe6, 0x75,
		0x58, 0xc4, 0xee, 0x26, 0x4c, 0xf0, 0xe6, 0x1d, 0x8f, 0xfe, 0x1c, 0x7f, 0xb8, 0x40, 0xd4, 0xae,
		0x43, 0x66, 0xcc, 0x80, 0xff, 0x12, 0x87, 0x32, 0xfb, 0xda, 0x3a, 0x14, 0x22, 0x0d, 0x3b, 0x1e,
		0xfe, 0x79, 0x0e, 0x8f, 0xa2, 0x88, 0xeb, 0xbc, 0x61, 0xc7, 0x13, 0xfc, 0xb2, 0x70, 0x9d, 0x23,
		0x48, 0xd8, 0x44, 0xaf, 0x8e, 0x47, 0xff, 0x8a, 0x88, 0xba, 0x80, 0xd4, 0x5e, 0x84, 0x7c, 0x50,
		0x7f, 0xe3, 0xf1, 0xbf, 0xca, 0xf1, 0x21, 0x86, 0x44, 0x20, 0x52, 0xff, 0xe3, 0x29, 0x7e, 0x4d,
		0x44, 0x20, 0x82, 0x22, 0xcb, 0x68, 0xb0, 0xa7, 0xc7, 0x33, 0xfd, 0xba, 0x58, 0x46, 0x03, 0x2d,
		0x9d, 0xcc, 0x26, 0x2d, 0x83, 0xf1, 0x14, 0xbf, 0x21, 0x66, 0x93, 0xda, 0x13, 0x37, 0x06, 0x9b,
		0x64, 0x3c, 0xc7, 0x6f, 0x0a, 0x37, 0x06, 0x7a, 0x64, 0x6d, 0x0f, 0xd0, 0x70, 0x83, 0x8c, 0xe7,
		0xfb, 0x02, 0xe7, 0x9b, 0x1a, 0xea, 0x8f, 0xb5, 0x97, 0x61, 0x76, 0x74, 0x73, 0x8c, 0x67, 0xfd,
		0xe2, 0xfb, 0x03, 0xc7, 0x99, 0x68, 0x6f, 0xac, 0xed, 0x87, 0x55, 0x36, 0xda, 0x18, 0xe3, 0x69,
		0xdf, 0x7c, 0xbf, 0xbf, 0xd0, 0x46, 0xfb, 0x62, 0xad, 0x0e, 0x10, 0xf6, 0xa4, 0x78, 0xae, 0xb7,
		0x38, 0x57, 0x04, 0x44, 0x96, 0x06, 0x6f, 0x49, 0xf1, 0xf8, 0x2f, 0x89, 0xa5, 0xc1, 0x11, 0x64,
		0x69, 0x88, 0x6e, 0x14, 0x8f, 0x7e, 0x5b, 0x2c, 0x0d, 0x01, 0xa9, 0xdd, 0x84, 0x9c, 0xd5, 0x33,
		0x4d, 0x92, 0x5b, 0xe8, 0xe1, 0x3f, 0xc9, 0x92, 0xff, 0xf3, 0x03, 0x0e, 0x16, 0x80, 0xda, 0x32,
		0x64, 0x70, 0xf7, 0x10, 0xb7, 0xe3, 0x90, 0xff, 0xf5, 0x81, 0xa8, 0x27, 0xc4, 0xba, 0xf6, 0x22,
		0x00, 0x3b, 0x4c, 0xd3, 0x0f, 0x45, 0x31, 0xd8, 0xff, 0xfe, 0x80, 0xff, 0x58, 0x22, 0x84, 0x84,
		0x04, 0xec, 0xa7, 0x17, 0x0f, 0x27, 0x78, 0xaf, 0x9f, 0x80, 0x1e, 0xc0, 0x57, 0x61, 0xe2, 0x8e,
		0x67, 0x5b, 0xbe, 0xd6, 0x89, 0x43, 0xff, 0x0f, 0x47, 0x0b, 0x7b, 0x12, 0xb0, 0xae, 0xed, 0x62,
		0x5f, 0xeb, 0x78, 0x71, 0xd8, 0xff, 0xe5, 0xd8, 0x00, 0x40, 0xc0, 0xba, 0xe6, 0xf9, 0xe3, 0xbc,
		0xf7, 0x77, 0x04, 0x58, 0x00, 0x88, 0xd3, 0xe4, 0xef, 0xbb, 0xf8, 0x24, 0x0e, 0xfb, 0x5d, 0xe1,
		0x34, 0xb7, 0xaf, 0x7d, 0x1c, 0xf2, 0xe4, 0x4f, 0xf6, 0x0b, 0xa8, 0x18, 0xf0, 0xff, 0x71, 0x70,
		0x88, 0x20, 0x4f, 0xf6, 0xfc, 0xb6, 0x6f, 0xc4, 0x07, 0xfb, 0xff, 0xf9, 0x4c, 0x0b, 0xfb, 0x5a,
		0x1d, 0x0a, 0x9e, 0xdf, 0x6e, 0xf7, 0xf8, 0x8e, 0x26, 0x06, 0xfe, 0xbd, 0x0f, 0x82, 0x43, 0x6e,
		0x80, 0x59, 0xbb, 0x3c, 0xfa, 0xbe, 0x0e, 0x36, 0xed, 0x4d, 0x9b, 0xdd, 0xd4, 0xc1, 0x37, 0x26,
		0xa0, 0xe8, 0x19, 0x5d, 0x47, 0xe8, 0x11, 0x5b, 0x5e, 0xa4, 0x7d, 0x78, 0x73, 0x67, 0xbb, 0x8f,
		0x9b, 0xff, 0x7c, 0x16, 0xb2, 0x2d, 0xca, 0x85, 0x66, 0x21, 0x4b, 0xdd, 0xbb, 0x4a, 0x3f, 0x27,
		0x25, 0x14, 0x3e, 0x0a, 0xe4, 0x8b, 0xf4, 0x16, 0x32, 0xc9, 0xe5, 0x8b, 0x81, 0xfc, 0x9a, 0xf8,
		0x6d, 0x28, 0x1b, 0x05, 0xf2, 0x25, 0x7a, 0x0d, 0x99, 0xe2, 0xf2, 0xa5, 0x40, 0xbe, 0x4c, 0x2f,
		0xd9, 0x27, 0xb9, 0x7c, 0x39, 0x90, 0xaf, 0xd0, 0x4b, 0xf5, 0x34, 0x97, 0xaf, 0x04, 0xf2, 0xeb,
		0xf4, 0x26, 0x7d, 0x8a, 0xcb, 0xaf, 0x07, 0xf2, 0x1b, 0xf4, 0xee, 0x1c, 0x71, 0xf9, 0x8d, 0x40,
		0xbe, 0x4a, 0x7f, 0x92, 0x32, 0xc1, 0xe5, 0xab, 0x48, 0x86, 0x09, 0xf6, 0x26, 0x2f, 0xd0, 0x8f,
		0xab, 0x65, 0x45, 0x0c, 0x43, 0xcd, 0x55, 0xfa, 0x93, 0x93, 0xac, 0xd0, 0x5c, 0x0d, 0x35, 0x8b,
		0xf4, 0x77, 0xef, 0x92, 0xd0, 0x2c, 0x86, 0x9a, 0x6b, 0xf2, 0x24, 0x9b, 0x7c, 0x3e, 0x0c, 0x35,
		0x4b, 0x72, 0x89, 0x25, 0x24, 0x1f, 0x86, 0x9a, 0x65, 0xb9, 0x4c, 0x3f, 0x0a, 0x88, 0x61, 0xa0,
		0xf1, 0xae, 0xca, 0xe7, 0x2a, 0xa9, 0x6a, 0x42, 0x11, 0xc3, 0x50, 0xb3, 0x28, 0xcf, 0x56, 0x52,
		0xd5, 0xa4, 0xd0, 0x84, 0x1e, 0x78, 0xd7, 0xe4, 0xf3, 0xf4, 0xbf, 0x51, 0x88, 0x61, 0xa8, 0x59,
		0x92, 0xe5, 0x4a, 0xaa, 0x9a, 0x12, 0x9a, 0xd0, 0x03, 0x6f, 0x59, 0xbe, 0x50, 0x49, 0x55, 0x27,
		0x85, 0x26, 0xe2, 0xc1, 0x8a, 0x3c, 0x57, 0x49, 0x55, 0xd3, 0x42, 0xb3, 0x12, 0x6a, 0xae, 0xcb,
		0x8f, 0x56, 0x52, 0xd5, 0x29, 0xa1, 0xb9, 0x1e, 0x6a, 0x6e, 0xc8, 0x8f, 0x55, 0x52, 0x55, 0x24,
		0x34, 0x37, 0x42, 0xcd, 0xaa, 0xfc, 0x78, 0x25, 0x55, 0x9d, 0x10, 0x9a, 0x55, 0x34, 0x07, 0x39,
		0xfe, 0x6a, 0x2f, 0xc8, 0x17, 0x2b, 0xa9, 0x6a, 0x59, 0x09, 0xc6, 0x11, 0xdd, 0x55, 0xf9, 0x52,
		0x25, 0x55, 0xcd, 0x06, 0xba, 0xab, 0x11, 0xdd, 0xa2, 0x5c, 0xa9, 0xa4, 0xaa, 0x52, 0xa0, 0x5b,
		0x8c, 0xe8, 0xae, 0xc9, 0x97, 0x2b, 0x29, 0x52, 0xad, 0xc5, 0x38, 0xa2, 0x5b, 0x92, 0xe7, 0xe9,
		0xb5, 0x7f, 0x30, 0x8e, 0xe8, 0x96, 0xe5, 0x27, 0x2a, 0xa9, 0x6a, 0x31, 0xd0, 0x2d, 0xcf, 0xbf,
		0x04, 0xd9, 0x5d, 0xfa, 0xcb, 0x7f, 0xf4, 0x24, 0xa4, 0x9a, 0x16, 0xfb, 0xd5, 0x41, 0x61, 0x11,
		0x2d, 0x84, 0x6b, 0x6c, 0x81, 0x2d, 0x18, 0x85, 0xa8, 0xd1, 0xd3, 0x90, 0xde, 0xd1, 0xac, 0x13,
		0xfe, 0x89, 0x6b, 0x94, 0x19, 0xd5, 0xaf, 0x15, 0xbf, 0xfb, 0xed, 0x8b, 0x89, 0xef, 0x7f, 0xfb,
		0x62, 0xe2, 0x2b, 0xff, 0x7a, 0x31, 0xf1, 0x83, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xcb, 0x16,
		0xfe, 0x2b, 0x34, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Simple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 34)
	s = append(s, "&prototests.Simple{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringSimple(this.Field1, "float64")+",\n")
	}
	if this.Field2 != nil {
		s = append(s, "Field2: "+valueToGoStringSimple(this.Field2, "float32")+",\n")
	}
	if this.Field3 != nil {
		s = append(s, "Field3: "+valueToGoStringSimple(this.Field3, "int32")+",\n")
	}
	if this.Field4 != nil {
		s = append(s, "Field4: "+valueToGoStringSimple(this.Field4, "int64")+",\n")
	}
	if this.Field5 != nil {
		s = append(s, "Field5: "+valueToGoStringSimple(this.Field5, "uint32")+",\n")
	}
	if this.Field6 != nil {
		s = append(s, "Field6: "+valueToGoStringSimple(this.Field6, "uint64")+",\n")
	}
	if this.Field7 != nil {
		s = append(s, "Field7: "+valueToGoStringSimple(this.Field7, "int32")+",\n")
	}
	if this.Field8 != nil {
		s = append(s, "Field8: "+valueToGoStringSimple(this.Field8, "int64")+",\n")
	}
	if this.Field9 != nil {
		s = append(s, "Field9: "+valueToGoStringSimple(this.Field9, "uint32")+",\n")
	}
	if this.Field10 != nil {
		s = append(s, "Field10: "+valueToGoStringSimple(this.Field10, "int32")+",\n")
	}
	if this.Field11 != nil {
		s = append(s, "Field11: "+valueToGoStringSimple(this.Field11, "uint64")+",\n")
	}
	if this.Field12 != nil {
		s = append(s, "Field12: "+valueToGoStringSimple(this.Field12, "int64")+",\n")
	}
	if this.Field13 != nil {
		s = append(s, "Field13: "+valueToGoStringSimple(this.Field13, "bool")+",\n")
	}
	if this.Field14 != nil {
		s = append(s, "Field14: "+valueToGoStringSimple(this.Field14, "string")+",\n")
	}
	if this.Field15 != nil {
		s = append(s, "Field15: "+valueToGoStringSimple(this.Field15, "byte")+",\n")
	}
	if this.Fields1 != nil {
		s = append(s, "Fields1: "+fmt.Sprintf("%#v", this.Fields1)+",\n")
	}
	if this.Fields2 != nil {
		s = append(s, "Fields2: "+fmt.Sprintf("%#v", this.Fields2)+",\n")
	}
	if this.Fields3 != nil {
		s = append(s, "Fields3: "+fmt.Sprintf("%#v", this.Fields3)+",\n")
	}
	if this.Fields4 != nil {
		s = append(s, "Fields4: "+fmt.Sprintf("%#v", this.Fields4)+",\n")
	}
	if this.Fields5 != nil {
		s = append(s, "Fields5: "+fmt.Sprintf("%#v", this.Fields5)+",\n")
	}
	if this.Fields6 != nil {
		s = append(s, "Fields6: "+fmt.Sprintf("%#v", this.Fields6)+",\n")
	}
	if this.Fields7 != nil {
		s = append(s, "Fields7: "+fmt.Sprintf("%#v", this.Fields7)+",\n")
	}
	if this.Fields8 != nil {
		s = append(s, "Fields8: "+fmt.Sprintf("%#v", this.Fields8)+",\n")
	}
	if this.Fields9 != nil {
		s = append(s, "Fields9: "+fmt.Sprintf("%#v", this.Fields9)+",\n")
	}
	if this.Fields10 != nil {
		s = append(s, "Fields10: "+fmt.Sprintf("%#v", this.Fields10)+",\n")
	}
	if this.Fields11 != nil {
		s = append(s, "Fields11: "+fmt.Sprintf("%#v", this.Fields11)+",\n")
	}
	if this.Fields12 != nil {
		s = append(s, "Fields12: "+fmt.Sprintf("%#v", this.Fields12)+",\n")
	}
	if this.Fields13 != nil {
		s = append(s, "Fields13: "+fmt.Sprintf("%#v", this.Fields13)+",\n")
	}
	if this.Fields14 != nil {
		s = append(s, "Fields14: "+fmt.Sprintf("%#v", this.Fields14)+",\n")
	}
	if this.Fields15 != nil {
		s = append(s, "Fields15: "+fmt.Sprintf("%#v", this.Fields15)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Nested) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&prototests.Nested{")
	if this.One != nil {
		s = append(s, "One: "+fmt.Sprintf("%#v", this.One)+",\n")
	}
	if this.Many != nil {
		s = append(s, "Many: "+fmt.Sprintf("%#v", this.Many)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSimple(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedSimple(r randySimple, easy bool) *Simple {
	this := &Simple{}
	if r.Intn(10) != 0 {
		v1 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.Field1 = &v1
	}
	if r.Intn(10) != 0 {
		v2 := float32(r.Float32())
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		this.Field2 = &v2
	}
	if r.Intn(10) != 0 {
		v3 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.Field3 = &v3
	}
	if r.Intn(10) != 0 {
		v4 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.Field4 = &v4
	}
	if r.Intn(10) != 0 {
		v5 := uint32(r.Uint32())
		this.Field5 = &v5
	}
	if r.Intn(10) != 0 {
		v6 := uint64(uint64(r.Uint32()))
		this.Field6 = &v6
	}
	if r.Intn(10) != 0 {
		v7 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.Field7 = &v7
	}
	if r.Intn(10) != 0 {
		v8 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		this.Field8 = &v8
	}
	if r.Intn(10) != 0 {
		v9 := uint32(r.Uint32())
		this.Field9 = &v9
	}
	if r.Intn(10) != 0 {
		v10 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		this.Field10 = &v10
	}
	if r.Intn(10) != 0 {
		v11 := uint64(uint64(r.Uint32()))
		this.Field11 = &v11
	}
	if r.Intn(10) != 0 {
		v12 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		this.Field12 = &v12
	}
	if r.Intn(10) != 0 {
		v13 := bool(bool(r.Intn(2) == 0))
		this.Field13 = &v13
	}
	if r.Intn(10) != 0 {
		v14 := string(randStringSimple(r))
		this.Field14 = &v14
	}
	if r.Intn(10) != 0 {
		v15 := r.Intn(100)
		this.Field15 = make([]byte, v15)
		for i := 0; i < v15; i++ {
			this.Field15[i] = byte(r.Intn(256))
		}
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(10)
		this.Fields1 = make([]float64, v16)
		for i := 0; i < v16; i++ {
			this.Fields1[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Fields1[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v17 := r.Intn(10)
		this.Fields2 = make([]float32, v17)
		for i := 0; i < v17; i++ {
			this.Fields2[i] = float32(r.Float32())
			if r.Intn(2) == 0 {
				this.Fields2[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v18 := r.Intn(10)
		this.Fields3 = make([]int32, v18)
		for i := 0; i < v18; i++ {
			this.Fields3[i] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Fields3[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v19 := r.Intn(10)
		this.Fields4 = make([]int64, v19)
		for i := 0; i < v19; i++ {
			this.Fields4[i] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Fields4[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(10)
		this.Fields5 = make([]uint32, v20)
		for i := 0; i < v20; i++ {
			this.Fields5[i] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v21 := r.Intn(10)
		this.Fields6 = make([]uint64, v21)
		for i := 0; i < v21; i++ {
			this.Fields6[i] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v22 := r.Intn(10)
		this.Fields7 = make([]int32, v22)
		for i := 0; i < v22; i++ {
			this.Fields7[i] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Fields7[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v23 := r.Intn(10)
		this.Fields8 = make([]int64, v23)
		for i := 0; i < v23; i++ {
			this.Fields8[i] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Fields8[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v24 := r.Intn(10)
		this.Fields9 = make([]uint32, v24)
		for i := 0; i < v24; i++ {
			this.Fields9[i] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v25 := r.Intn(10)
		this.Fields10 = make([]int32, v25)
		for i := 0; i < v25; i++ {
			this.Fields10[i] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Fields10[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(10)
		this.Fields11 = make([]uint64, v26)
		for i := 0; i < v26; i++ {
			this.Fields11[i] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v27 := r.Intn(10)
		this.Fields12 = make([]int64, v27)
		for i := 0; i < v27; i++ {
			this.Fields12[i] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Fields12[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v28 := r.Intn(10)
		this.Fields13 = make([]bool, v28)
		for i := 0; i < v28; i++ {
			this.Fields13[i] = bool(bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v29 := r.Intn(10)
		this.Fields14 = make([]string, v29)
		for i := 0; i < v29; i++ {
			this.Fields14[i] = string(randStringSimple(r))
		}
	}
	if r.Intn(10) != 0 {
		v30 := r.Intn(10)
		this.Fields15 = make([][]byte, v30)
		for i := 0; i < v30; i++ {
			v31 := r.Intn(100)
			this.Fields15[i] = make([]byte, v31)
			for j := 0; j < v31; j++ {
				this.Fields15[i][j] = byte(r.Intn(256))
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSimple(r, 36)
	}
	return this
}

func NewPopulatedNested(r randySimple, easy bool) *Nested {
	this := &Nested{}
	if r.Intn(10) != 0 {
		this.One = NewPopulatedSimple(r, easy)
	}
	if r.Intn(10) != 0 {
		v32 := r.Intn(5)
		this.Many = make([]*Simple, v32)
		for i := 0; i < v32; i++ {
			this.Many[i] = NewPopulatedSimple(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSimple(r, 3)
	}
	return this
}

type randySimple interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSimple(r randySimple) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSimple(r randySimple) string {
	v33 := r.Intn(100)
	tmps := make([]rune, v33)
	for i := 0; i < v33; i++ {
		tmps[i] = randUTF8RuneSimple(r)
	}
	return string(tmps)
}
func randUnrecognizedSimple(r randySimple, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSimple(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSimple(dAtA []byte, r randySimple, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSimple(dAtA, uint64(key))
		v34 := r.Int63()
		if r.Intn(2) == 0 {
			v34 *= -1
		}
		dAtA = encodeVarintPopulateSimple(dAtA, uint64(v34))
	case 1:
		dAtA = encodeVarintPopulateSimple(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSimple(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSimple(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSimple(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSimple(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}

func init() { proto.RegisterFile("simple.proto", fileDescriptorSimple) }

var fileDescriptorSimple = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd3, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc0, 0x71, 0x4d, 0x26, 0x71, 0x92, 0xad, 0x43, 0xda, 0x95, 0x28, 0x43, 0x80, 0x30, 0x04,
	0x84, 0xe6, 0x42, 0x5a, 0x7f, 0x25, 0xf1, 0x95, 0x03, 0x37, 0x40, 0x32, 0x12, 0x77, 0x4a, 0x4d,
	0x88, 0xd4, 0xd6, 0x15, 0x76, 0x0f, 0xbc, 0x04, 0xcf, 0xc2, 0x2b, 0x85, 0x27, 0xe0, 0xc8, 0x11,
	0xe1, 0xec, 0x87, 0x2f, 0x9c, 0x92, 0xf9, 0xff, 0x6c, 0x6b, 0xf6, 0xb0, 0x2a, 0xac, 0x77, 0xd7,
	0xb7, 0x57, 0xe5, 0xf2, 0xf6, 0x5b, 0xd5, 0x54, 0x5a, 0xb5, 0x3f, 0x4d, 0x59, 0x37, 0xf5, 0xec,
	0xd5, 0x76, 0xd7, 0x7c, 0xbd, 0xbb, 0x58, 0x7e, 0xae, 0xae, 0xcf, 0xb6, 0xd5, 0xb6, 0x3a, 0x6b,
	0xed, 0xe2, 0xee, 0x4b, 0x3b, 0xb5, 0x43, 0xfb, 0xef, 0xf0, 0xea, 0xe2, 0x47, 0xa0, 0x82, 0x0f,
	0xed, 0xb7, 0xf4, 0xa9, 0x0a, 0xde, 0xec, 0xca, 0xab, 0xcb, 0x88, 0x80, 0x41, 0xa0, 0x30, 0x93,
	0xeb, 0x31, 0xf5, 0x18, 0xa4, 0x67, 0x7a, 0xec, 0x7a, 0x42, 0xc8, 0x20, 0x03, 0xd3, 0x13, 0xd7,
	0x53, 0xea, 0x33, 0x08, 0x9a, 0x9e, 0xba, 0x9e, 0xd1, 0x80, 0x41, 0x26, 0xa6, 0x67, 0xae, 0xaf,
	0x28, 0x60, 0x90, 0xbe, 0xe9, 0x2b, 0xd7, 0xd7, 0x34, 0x64, 0x90, 0x13, 0xd3, 0xd7, 0xae, 0x6f,
	0x68, 0xc4, 0x20, 0xda, 0xf4, 0x8d, 0xeb, 0x39, 0x8d, 0x19, 0x64, 0x68, 0x7a, 0xae, 0x49, 0x0d,
	0x0f, 0x27, 0x39, 0x27, 0xc5, 0x20, 0xd3, 0xc2, 0x8e, 0x5e, 0x22, 0x3a, 0x62, 0x90, 0xc0, 0x4a,
	0xe4, 0x25, 0xa6, 0x90, 0x41, 0x8e, 0xad, 0xc4, 0x5e, 0x12, 0x9a, 0x30, 0xc8, 0xc8, 0x4a, 0xe2,
	0x25, 0xa5, 0x7b, 0x0c, 0x32, 0xb6, 0x92, 0x7a, 0xc9, 0x68, 0xca, 0x20, 0xa1, 0x95, 0xcc, 0x49,
	0x1d, 0xd1, 0x7d, 0x46, 0x81, 0xc2, 0x8e, 0x5e, 0x62, 0x3a, 0x65, 0x94, 0x9e, 0x15, 0xbf, 0x41,
	0x9d, 0xd0, 0x03, 0x46, 0x19, 0x58, 0xf1, 0x1b, 0xd4, 0x29, 0x11, 0xa3, 0xa0, 0x15, 0xbf, 0x41,
	0x9d, 0xd1, 0x43, 0x46, 0x99, 0x58, 0xe9, 0x6c, 0xb0, 0xa2, 0x19, 0xa3, 0xf4, 0xad, 0xac, 0xbc,
	0xac, 0xe9, 0x11, 0xa3, 0x9c, 0x58, 0x59, 0x7b, 0xd9, 0xd0, 0x63, 0x46, 0xd1, 0x56, 0x36, 0x5e,
	0x72, 0x7a, 0xc2, 0x28, 0x43, 0x2b, 0xb9, 0x9e, 0xa9, 0x91, 0x39, 0xda, 0x39, 0xcd, 0x19, 0x65,
	0x5a, 0xb8, 0xb9, 0x63, 0x11, 0x3d, 0x65, 0x94, 0xc0, 0x59, 0xd4, 0xb1, 0x98, 0x98, 0x51, 0x8e,
	0x9d, 0xc5, 0x1d, 0x4b, 0xe8, 0x19, 0xa3, 0x8c, 0x9c, 0x25, 0x1d, 0x4b, 0x69, 0xc1, 0x28, 0x63,
	0x67, 0x69, 0xc7, 0x32, 0x7a, 0xce, 0x28, 0xa1, 0xb3, 0x6c, 0xf1, 0x51, 0x05, 0xef, 0xca, 0xba,
	0x29, 0x2f, 0xf5, 0x0b, 0x85, 0xef, 0x6f, 0xca, 0xf6, 0x32, 0x1c, 0xc5, 0x7a, 0xe9, 0xef, 0xd8,
	0xf2, 0x70, 0x61, 0x8a, 0x7f, 0xac, 0x5f, 0xaa, 0xfe, 0xdb, 0x4f, 0x37, 0xdf, 0xa9, 0xc7, 0xf8,
	0x9f, 0xc7, 0x5a, 0x7f, 0x1d, 0xfe, 0xde, 0xcf, 0xe1, 0xcf, 0x7e, 0x0e, 0x3f, 0x7f, 0xcd, 0xe1,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x1a, 0x86, 0x78, 0xc0, 0x03, 0x00, 0x00,
}

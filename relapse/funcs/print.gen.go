// Code generated by funcs-gen. DO NOT EDIT.
package funcs

import (
	"fmt"
)

type printDouble struct {
	E Double
	hash uint64
}

func (this *printDouble) Eval() (float64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printDouble) Hash() uint64 {
	return this.hash
}

func (this *printDouble) IsVariable() {}

func init() {
	Register("printDouble", "print", PrintDouble)
}

//PrintDouble returns a function that prints out the value of the argument function and returns its value.
func PrintDouble(e Double) Double {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printDouble{E: e, hash: h}
}

type printInt struct {
	E Int
	hash uint64
}

func (this *printInt) Eval() (int64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printInt) Hash() uint64 {
	return this.hash
}

func (this *printInt) IsVariable() {}

func init() {
	Register("printInt", "print", PrintInt)
}

//PrintInt returns a function that prints out the value of the argument function and returns its value.
func PrintInt(e Int) Int {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printInt{E: e, hash: h}
}

type printUint struct {
	E Uint
	hash uint64
}

func (this *printUint) Eval() (uint64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printUint) Hash() uint64 {
	return this.hash
}

func (this *printUint) IsVariable() {}

func init() {
	Register("printUint", "print", PrintUint)
}

//PrintUint returns a function that prints out the value of the argument function and returns its value.
func PrintUint(e Uint) Uint {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printUint{E: e, hash: h}
}

type printBool struct {
	E Bool
	hash uint64
}

func (this *printBool) Eval() (bool, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printBool) Hash() uint64 {
	return this.hash
}

func (this *printBool) IsVariable() {}

func init() {
	Register("printBool", "print", PrintBool)
}

//PrintBool returns a function that prints out the value of the argument function and returns its value.
func PrintBool(e Bool) Bool {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printBool{E: e, hash: h}
}

type printString struct {
	E String
	hash uint64
}

func (this *printString) Eval() (string, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printString) Hash() uint64 {
	return this.hash
}

func (this *printString) IsVariable() {}

func init() {
	Register("printString", "print", PrintString)
}

//PrintString returns a function that prints out the value of the argument function and returns its value.
func PrintString(e String) String {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printString{E: e, hash: h}
}

type printBytes struct {
	E Bytes
	hash uint64
}

func (this *printBytes) Eval() ([]byte, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printBytes) Hash() uint64 {
	return this.hash
}

func (this *printBytes) IsVariable() {}

func init() {
	Register("printBytes", "print", PrintBytes)
}

//PrintBytes returns a function that prints out the value of the argument function and returns its value.
func PrintBytes(e Bytes) Bytes {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printBytes{E: e, hash: h}
}

type printDoubles struct {
	E Doubles
	hash uint64
}

func (this *printDoubles) Eval() ([]float64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printDoubles) Hash() uint64 {
	return this.hash
}

func (this *printDoubles) IsVariable() {}

func init() {
	Register("printDoubles", "print", PrintDoubles)
}

//PrintDoubles returns a function that prints out the value of the argument function and returns its value.
func PrintDoubles(e Doubles) Doubles {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printDoubles{E: e, hash: h}
}

type printInts struct {
	E Ints
	hash uint64
}

func (this *printInts) Eval() ([]int64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printInts) Hash() uint64 {
	return this.hash
}

func (this *printInts) IsVariable() {}

func init() {
	Register("printInts", "print", PrintInts)
}

//PrintInts returns a function that prints out the value of the argument function and returns its value.
func PrintInts(e Ints) Ints {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printInts{E: e, hash: h}
}

type printUints struct {
	E Uints
	hash uint64
}

func (this *printUints) Eval() ([]uint64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printUints) Hash() uint64 {
	return this.hash
}

func (this *printUints) IsVariable() {}

func init() {
	Register("printUints", "print", PrintUints)
}

//PrintUints returns a function that prints out the value of the argument function and returns its value.
func PrintUints(e Uints) Uints {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printUints{E: e, hash: h}
}

type printBools struct {
	E Bools
	hash uint64
}

func (this *printBools) Eval() ([]bool, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printBools) Hash() uint64 {
	return this.hash
}

func (this *printBools) IsVariable() {}

func init() {
	Register("printBools", "print", PrintBools)
}

//PrintBools returns a function that prints out the value of the argument function and returns its value.
func PrintBools(e Bools) Bools {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printBools{E: e, hash: h}
}

type printStrings struct {
	E Strings
	hash uint64
}

func (this *printStrings) Eval() ([]string, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printStrings) Hash() uint64 {
	return this.hash
}

func (this *printStrings) IsVariable() {}

func init() {
	Register("printStrings", "print", PrintStrings)
}

//PrintStrings returns a function that prints out the value of the argument function and returns its value.
func PrintStrings(e Strings) Strings {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printStrings{E: e, hash: h}
}

type printListOfBytes struct {
	E ListOfBytes
	hash uint64
}

func (this *printListOfBytes) Eval() ([][]byte, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printListOfBytes) Hash() uint64 {
	return this.hash
}

func (this *printListOfBytes) IsVariable() {}

func init() {
	Register("printListOfBytes", "print", PrintListOfBytes)
}

//PrintListOfBytes returns a function that prints out the value of the argument function and returns its value.
func PrintListOfBytes(e ListOfBytes) ListOfBytes {
	h := uint64(17)
	h = 31*h + 13
	h = 31*h + e.Hash()
	return &printListOfBytes{E: e, hash: h}
}

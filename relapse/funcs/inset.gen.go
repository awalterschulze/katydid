// Code generated by funcs-gen. DO NOT EDIT.
package funcs

import (
	"strings"
)

type inSetInt struct {
	Elem Int
	List ConstInts
	set  map[int64]struct{}
	hash uint64
}

func (this *inSetInt) Init() error {
	if this.set != nil {
		return nil
	}
	l, err := this.List.Eval()
	if err != nil {
		return err
	}
	this.set = make(map[int64]struct{})
	for i := range l {
		this.set[l[i]] = struct{}{}
	}
	return nil
}

func (this *inSetInt) Eval() (bool, error) {
	v, err := this.Elem.Eval()
	if err != nil {
		return false, err
	}
	_, ok := this.set[v]
	return ok, nil
}

func (this *inSetInt) Compare(that Comparable) int {
	if this.Hash() != that.Hash() {
		if this.Hash() < that.Hash() {
			return -1
		}
		return 1
	}
	if other, ok := that.(*inSetInt); ok {
		if c := this.Elem.Compare(other.Elem); c != 0 {
			return c
		}
		if c := this.List.Compare(other.List); c != 0 {
			return c
		}
		return 0
	}
	return strings.Compare(this.String(), that.String())
}

func (this *inSetInt) String() string {
	return "contains(" + sjoin(this.Elem, this.List) + ")"
}

func (this *inSetInt) Hash() uint64 {
	return this.hash
}

func init() {
	Register("contains", ContainsInt)
}

//ContainsInt returns a function that checks whether the element is contained in the list.
func ContainsInt(element Int, list ConstInts) Bool {
	h := uint64(17)
	h = 31*h + 73679
	h = 31*h + element.Hash()
	h = 31*h + list.Hash()
	return &inSetInt{element, list, nil, h}
}

type inSetUint struct {
	Elem Uint
	List ConstUints
	set  map[uint64]struct{}
	hash uint64
}

func (this *inSetUint) Init() error {
	if this.set != nil {
		return nil
	}
	l, err := this.List.Eval()
	if err != nil {
		return err
	}
	this.set = make(map[uint64]struct{})
	for i := range l {
		this.set[l[i]] = struct{}{}
	}
	return nil
}

func (this *inSetUint) Eval() (bool, error) {
	v, err := this.Elem.Eval()
	if err != nil {
		return false, err
	}
	_, ok := this.set[v]
	return ok, nil
}

func (this *inSetUint) Compare(that Comparable) int {
	if this.Hash() != that.Hash() {
		if this.Hash() < that.Hash() {
			return -1
		}
		return 1
	}
	if other, ok := that.(*inSetUint); ok {
		if c := this.Elem.Compare(other.Elem); c != 0 {
			return c
		}
		if c := this.List.Compare(other.List); c != 0 {
			return c
		}
		return 0
	}
	return strings.Compare(this.String(), that.String())
}

func (this *inSetUint) String() string {
	return "contains(" + sjoin(this.Elem, this.List) + ")"
}

func (this *inSetUint) Hash() uint64 {
	return this.hash
}

func init() {
	Register("contains", ContainsUint)
}

//ContainsUint returns a function that checks whether the element is contained in the list.
func ContainsUint(element Uint, list ConstUints) Bool {
	h := uint64(17)
	h = 31*h + 2636666
	h = 31*h + element.Hash()
	h = 31*h + list.Hash()
	return &inSetUint{element, list, nil, h}
}

type inSetString struct {
	Elem String
	List ConstStrings
	set  map[string]struct{}
	hash uint64
}

func (this *inSetString) Init() error {
	if this.set != nil {
		return nil
	}
	l, err := this.List.Eval()
	if err != nil {
		return err
	}
	this.set = make(map[string]struct{})
	for i := range l {
		this.set[l[i]] = struct{}{}
	}
	return nil
}

func (this *inSetString) Eval() (bool, error) {
	v, err := this.Elem.Eval()
	if err != nil {
		return false, err
	}
	_, ok := this.set[v]
	return ok, nil
}

func (this *inSetString) Compare(that Comparable) int {
	if this.Hash() != that.Hash() {
		if this.Hash() < that.Hash() {
			return -1
		}
		return 1
	}
	if other, ok := that.(*inSetString); ok {
		if c := this.Elem.Compare(other.Elem); c != 0 {
			return c
		}
		if c := this.List.Compare(other.List); c != 0 {
			return c
		}
		return 0
	}
	return strings.Compare(this.String(), that.String())
}

func (this *inSetString) String() string {
	return "contains(" + sjoin(this.Elem, this.List) + ")"
}

func (this *inSetString) Hash() uint64 {
	return this.hash
}

func init() {
	Register("contains", ContainsString)
}

//ContainsString returns a function that checks whether the element is contained in the list.
func ContainsString(element String, list ConstStrings) Bool {
	h := uint64(17)
	h = 31*h + 2486848561
	h = 31*h + element.Hash()
	h = 31*h + list.Hash()
	return &inSetString{element, list, nil, h}
}

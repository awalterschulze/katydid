// Code generated by funcs-gen. DO NOT EDIT.
package funcs

import (
	"strings"
)

type listOfDouble struct {
	List []Double
	hash uint64
}

//NewListOfDouble returns a new function that when evaluated returns a list of type Double
func NewListOfDouble(v []Double) Doubles {
	h := uint64(17)
	h = 31*h + 63639164578
	for i := 0; i < len(v); i++ {
		h = 31*h + v[i].Hash()
	}
	return &listOfDouble{v, h}
}

func (this *listOfDouble) Eval() ([]float64, error) {
	res := make([]float64, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfDouble) Hash() uint64 {
	return this.hash
}

func (this *listOfDouble) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[]double{" + strings.Join(ss, ",") + "}"
}

func (this *listOfDouble) IsListOf() {}

type listOfInt struct {
	List []Int
	hash uint64
}

//NewListOfInt returns a new function that when evaluated returns a list of type Int
func NewListOfInt(v []Int) Ints {
	h := uint64(17)
	h = 31*h + 2284164
	for i := 0; i < len(v); i++ {
		h = 31*h + v[i].Hash()
	}
	return &listOfInt{v, h}
}

func (this *listOfInt) Eval() ([]int64, error) {
	res := make([]int64, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfInt) Hash() uint64 {
	return this.hash
}

func (this *listOfInt) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[]int{" + strings.Join(ss, ",") + "}"
}

func (this *listOfInt) IsListOf() {}

type listOfUint struct {
	List []Uint
	hash uint64
}

//NewListOfUint returns a new function that when evaluated returns a list of type Uint
func NewListOfUint(v []Uint) Uints {
	h := uint64(17)
	h = 31*h + 81736761
	for i := 0; i < len(v); i++ {
		h = 31*h + v[i].Hash()
	}
	return &listOfUint{v, h}
}

func (this *listOfUint) Eval() ([]uint64, error) {
	res := make([]uint64, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfUint) Hash() uint64 {
	return this.hash
}

func (this *listOfUint) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[]uint{" + strings.Join(ss, ",") + "}"
}

func (this *listOfUint) IsListOf() {}

type listOfBool struct {
	List []Bool
	hash uint64
}

//NewListOfBool returns a new function that when evaluated returns a list of type Bool
func NewListOfBool(v []Bool) Bools {
	h := uint64(17)
	h = 31*h + 64369321
	for i := 0; i < len(v); i++ {
		h = 31*h + v[i].Hash()
	}
	return &listOfBool{v, h}
}

func (this *listOfBool) Eval() ([]bool, error) {
	res := make([]bool, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfBool) Hash() uint64 {
	return this.hash
}

func (this *listOfBool) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[]bool{" + strings.Join(ss, ",") + "}"
}

func (this *listOfBool) IsListOf() {}

type listOfString struct {
	List []String
	hash uint64
}

//NewListOfString returns a new function that when evaluated returns a list of type String
func NewListOfString(v []String) Strings {
	h := uint64(17)
	h = 31*h + 77092305506
	for i := 0; i < len(v); i++ {
		h = 31*h + v[i].Hash()
	}
	return &listOfString{v, h}
}

func (this *listOfString) Eval() ([]string, error) {
	res := make([]string, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfString) Hash() uint64 {
	return this.hash
}

func (this *listOfString) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[]string{" + strings.Join(ss, ",") + "}"
}

func (this *listOfString) IsListOf() {}

type listOfBytes struct {
	List []Bytes
	hash uint64
}

//NewListOfBytes returns a new function that when evaluated returns a list of type Bytes
func NewListOfBytes(v []Bytes) ListOfBytes {
	h := uint64(17)
	h = 31*h + 65169257167589942
	for i := 0; i < len(v); i++ {
		h = 31*h + v[i].Hash()
	}
	return &listOfBytes{v, h}
}

func (this *listOfBytes) Eval() ([][]byte, error) {
	res := make([][]byte, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfBytes) Hash() uint64 {
	return this.hash
}

func (this *listOfBytes) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[][]byte{" + strings.Join(ss, ",") + "}"
}

func (this *listOfBytes) IsListOf() {}

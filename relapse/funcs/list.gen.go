// Code generated by funcs-gen. DO NOT EDIT.
package funcs

import (
	"strings"
)

type listOfDouble struct {
	List []Double
}

//NewListOfDouble returns a new function that when evaluated returns a list of type Double
func NewListOfDouble(v []Double) Doubles {
	return &listOfDouble{v}
}

func (this *listOfDouble) Eval() ([]float64, error) {
	res := make([]float64, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfDouble) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[]double{" + strings.Join(ss, ",") + "}"
}

func (this *listOfDouble) IsListOf() {}

type listOfInt struct {
	List []Int
}

//NewListOfInt returns a new function that when evaluated returns a list of type Int
func NewListOfInt(v []Int) Ints {
	return &listOfInt{v}
}

func (this *listOfInt) Eval() ([]int64, error) {
	res := make([]int64, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfInt) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[]int{" + strings.Join(ss, ",") + "}"
}

func (this *listOfInt) IsListOf() {}

type listOfUint struct {
	List []Uint
}

//NewListOfUint returns a new function that when evaluated returns a list of type Uint
func NewListOfUint(v []Uint) Uints {
	return &listOfUint{v}
}

func (this *listOfUint) Eval() ([]uint64, error) {
	res := make([]uint64, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfUint) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[]uint{" + strings.Join(ss, ",") + "}"
}

func (this *listOfUint) IsListOf() {}

type listOfBool struct {
	List []Bool
}

//NewListOfBool returns a new function that when evaluated returns a list of type Bool
func NewListOfBool(v []Bool) Bools {
	return &listOfBool{v}
}

func (this *listOfBool) Eval() ([]bool, error) {
	res := make([]bool, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfBool) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[]bool{" + strings.Join(ss, ",") + "}"
}

func (this *listOfBool) IsListOf() {}

type listOfString struct {
	List []String
}

//NewListOfString returns a new function that when evaluated returns a list of type String
func NewListOfString(v []String) Strings {
	return &listOfString{v}
}

func (this *listOfString) Eval() ([]string, error) {
	res := make([]string, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfString) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[]string{" + strings.Join(ss, ",") + "}"
}

func (this *listOfString) IsListOf() {}

type listOfBytes struct {
	List []Bytes
}

//NewListOfBytes returns a new function that when evaluated returns a list of type Bytes
func NewListOfBytes(v []Bytes) ListOfBytes {
	return &listOfBytes{v}
}

func (this *listOfBytes) Eval() ([][]byte, error) {
	res := make([][]byte, len(this.List))
	var err error
	for i, e := range this.List {
		res[i], err = e.Eval()
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (this *listOfBytes) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = sprint(this.List[i])
	}
	return "[][]byte{" + strings.Join(ss, ",") + "}"
}

func (this *listOfBytes) IsListOf() {}

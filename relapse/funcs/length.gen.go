// Code generated by funcs-gen. DO NOT EDIT.
package funcs

import (
	"strings"
)

type lenDoubles struct {
	E Doubles
	hash uint64
}

func (this *lenDoubles) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func (this *lenDoubles) Compare(that Comparable) int {
	if this.Hash() != that.Hash() {
		if this.Hash() < that.Hash() {
			return -1
		}
		return 1
	}
	if other, ok := that.(*lenDoubles); ok {
		if c := this.E.Compare(other.E); c != 0 {
			return c
		}
		return 0
	}
	return strings.Compare(this.String(), that.String())
}

func (this *lenDoubles) String() string {
	return "length(" + this.E.String() + ")"
}

func (this *lenDoubles) HasVariable() bool {
	return this.E.HasVariable()
}

func (this *lenDoubles) Hash() uint64 {
	return this.hash
}

func init() {
	Register("length", LenDoubles)
}

//LenDoubles returns a function that returns the length of a list of type Doubles
func LenDoubles(e Doubles) Int {
	h := uint64(17)
	h = 31*h + 7
	h = 31*h + e.Hash()
	return TrimInt(&lenDoubles{E: e, hash: h})
}

type lenInts struct {
	E Ints
	hash uint64
}

func (this *lenInts) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func (this *lenInts) Compare(that Comparable) int {
	if this.Hash() != that.Hash() {
		if this.Hash() < that.Hash() {
			return -1
		}
		return 1
	}
	if other, ok := that.(*lenInts); ok {
		if c := this.E.Compare(other.E); c != 0 {
			return c
		}
		return 0
	}
	return strings.Compare(this.String(), that.String())
}

func (this *lenInts) String() string {
	return "length(" + this.E.String() + ")"
}

func (this *lenInts) HasVariable() bool {
	return this.E.HasVariable()
}

func (this *lenInts) Hash() uint64 {
	return this.hash
}

func init() {
	Register("length", LenInts)
}

//LenInts returns a function that returns the length of a list of type Ints
func LenInts(e Ints) Int {
	h := uint64(17)
	h = 31*h + 7
	h = 31*h + e.Hash()
	return TrimInt(&lenInts{E: e, hash: h})
}

type lenUints struct {
	E Uints
	hash uint64
}

func (this *lenUints) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func (this *lenUints) Compare(that Comparable) int {
	if this.Hash() != that.Hash() {
		if this.Hash() < that.Hash() {
			return -1
		}
		return 1
	}
	if other, ok := that.(*lenUints); ok {
		if c := this.E.Compare(other.E); c != 0 {
			return c
		}
		return 0
	}
	return strings.Compare(this.String(), that.String())
}

func (this *lenUints) String() string {
	return "length(" + this.E.String() + ")"
}

func (this *lenUints) HasVariable() bool {
	return this.E.HasVariable()
}

func (this *lenUints) Hash() uint64 {
	return this.hash
}

func init() {
	Register("length", LenUints)
}

//LenUints returns a function that returns the length of a list of type Uints
func LenUints(e Uints) Int {
	h := uint64(17)
	h = 31*h + 7
	h = 31*h + e.Hash()
	return TrimInt(&lenUints{E: e, hash: h})
}

type lenBools struct {
	E Bools
	hash uint64
}

func (this *lenBools) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func (this *lenBools) Compare(that Comparable) int {
	if this.Hash() != that.Hash() {
		if this.Hash() < that.Hash() {
			return -1
		}
		return 1
	}
	if other, ok := that.(*lenBools); ok {
		if c := this.E.Compare(other.E); c != 0 {
			return c
		}
		return 0
	}
	return strings.Compare(this.String(), that.String())
}

func (this *lenBools) String() string {
	return "length(" + this.E.String() + ")"
}

func (this *lenBools) HasVariable() bool {
	return this.E.HasVariable()
}

func (this *lenBools) Hash() uint64 {
	return this.hash
}

func init() {
	Register("length", LenBools)
}

//LenBools returns a function that returns the length of a list of type Bools
func LenBools(e Bools) Int {
	h := uint64(17)
	h = 31*h + 7
	h = 31*h + e.Hash()
	return TrimInt(&lenBools{E: e, hash: h})
}

type lenStrings struct {
	E Strings
	hash uint64
}

func (this *lenStrings) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func (this *lenStrings) Compare(that Comparable) int {
	if this.Hash() != that.Hash() {
		if this.Hash() < that.Hash() {
			return -1
		}
		return 1
	}
	if other, ok := that.(*lenStrings); ok {
		if c := this.E.Compare(other.E); c != 0 {
			return c
		}
		return 0
	}
	return strings.Compare(this.String(), that.String())
}

func (this *lenStrings) String() string {
	return "length(" + this.E.String() + ")"
}

func (this *lenStrings) HasVariable() bool {
	return this.E.HasVariable()
}

func (this *lenStrings) Hash() uint64 {
	return this.hash
}

func init() {
	Register("length", LenStrings)
}

//LenStrings returns a function that returns the length of a list of type Strings
func LenStrings(e Strings) Int {
	h := uint64(17)
	h = 31*h + 7
	h = 31*h + e.Hash()
	return TrimInt(&lenStrings{E: e, hash: h})
}

type lenListOfBytes struct {
	E ListOfBytes
	hash uint64
}

func (this *lenListOfBytes) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func (this *lenListOfBytes) Compare(that Comparable) int {
	if this.Hash() != that.Hash() {
		if this.Hash() < that.Hash() {
			return -1
		}
		return 1
	}
	if other, ok := that.(*lenListOfBytes); ok {
		if c := this.E.Compare(other.E); c != 0 {
			return c
		}
		return 0
	}
	return strings.Compare(this.String(), that.String())
}

func (this *lenListOfBytes) String() string {
	return "length(" + this.E.String() + ")"
}

func (this *lenListOfBytes) HasVariable() bool {
	return this.E.HasVariable()
}

func (this *lenListOfBytes) Hash() uint64 {
	return this.hash
}

func init() {
	Register("length", LenListOfBytes)
}

//LenListOfBytes returns a function that returns the length of a list of type ListOfBytes
func LenListOfBytes(e ListOfBytes) Int {
	h := uint64(17)
	h = 31*h + 7
	h = 31*h + e.Hash()
	return TrimInt(&lenListOfBytes{E: e, hash: h})
}

type lenString struct {
	E String
	hash uint64
}

func (this *lenString) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func (this *lenString) Compare(that Comparable) int {
	if this.Hash() != that.Hash() {
		if this.Hash() < that.Hash() {
			return -1
		}
		return 1
	}
	if other, ok := that.(*lenString); ok {
		if c := this.E.Compare(other.E); c != 0 {
			return c
		}
		return 0
	}
	return strings.Compare(this.String(), that.String())
}

func (this *lenString) String() string {
	return "length(" + this.E.String() + ")"
}

func (this *lenString) HasVariable() bool {
	return this.E.HasVariable()
}

func (this *lenString) Hash() uint64 {
	return this.hash
}

func init() {
	Register("length", LenString)
}

//LenString returns a function that returns the length of a list of type String
func LenString(e String) Int {
	h := uint64(17)
	h = 31*h + 7
	h = 31*h + e.Hash()
	return TrimInt(&lenString{E: e, hash: h})
}

type lenBytes struct {
	E Bytes
	hash uint64
}

func (this *lenBytes) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func (this *lenBytes) Compare(that Comparable) int {
	if this.Hash() != that.Hash() {
		if this.Hash() < that.Hash() {
			return -1
		}
		return 1
	}
	if other, ok := that.(*lenBytes); ok {
		if c := this.E.Compare(other.E); c != 0 {
			return c
		}
		return 0
	}
	return strings.Compare(this.String(), that.String())
}

func (this *lenBytes) String() string {
	return "length(" + this.E.String() + ")"
}

func (this *lenBytes) HasVariable() bool {
	return this.E.HasVariable()
}

func (this *lenBytes) Hash() uint64 {
	return this.hash
}

func init() {
	Register("length", LenBytes)
}

//LenBytes returns a function that returns the length of a list of type Bytes
func LenBytes(e Bytes) Int {
	h := uint64(17)
	h = 31*h + 7
	h = 31*h + e.Hash()
	return TrimInt(&lenBytes{E: e, hash: h})
}

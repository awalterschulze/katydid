// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto3.proto

/*
Package prototests is a generated protocol buffer package.

It is generated from these files:
	proto3.proto

It has these top-level messages:
	Proto3
	SmallMsg3
*/
package prototests

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import gzip "compress/gzip"
import bytes "bytes"
import ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Proto3 is a proto3 message.
type Proto3 struct {
	Field int64      `protobuf:"varint,1,opt,name=Field,proto3" json:"Field,omitempty"`
	Msg   *SmallMsg3 `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`
	Ints  []int64    `protobuf:"varint,4,rep,packed,name=Ints" json:"Ints,omitempty"`
}

func (m *Proto3) Reset()                    { *m = Proto3{} }
func (m *Proto3) String() string            { return proto.CompactTextString(m) }
func (*Proto3) ProtoMessage()               {}
func (*Proto3) Descriptor() ([]byte, []int) { return fileDescriptorProto3, []int{0} }

func (m *Proto3) GetField() int64 {
	if m != nil {
		return m.Field
	}
	return 0
}

func (m *Proto3) GetMsg() *SmallMsg3 {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Proto3) GetInts() []int64 {
	if m != nil {
		return m.Ints
	}
	return nil
}

// SmallMsg3 only contains some native fields.
type SmallMsg3 struct {
	ScarBusStop     string   `protobuf:"bytes,1,opt,name=ScarBusStop,proto3" json:"ScarBusStop,omitempty"`
	FlightParachute []uint32 `protobuf:"fixed32,12,rep,packed,name=FlightParachute" json:"FlightParachute,omitempty"`
}

func (m *SmallMsg3) Reset()                    { *m = SmallMsg3{} }
func (m *SmallMsg3) String() string            { return proto.CompactTextString(m) }
func (*SmallMsg3) ProtoMessage()               {}
func (*SmallMsg3) Descriptor() ([]byte, []int) { return fileDescriptorProto3, []int{1} }

func (m *SmallMsg3) GetScarBusStop() string {
	if m != nil {
		return m.ScarBusStop
	}
	return ""
}

func (m *SmallMsg3) GetFlightParachute() []uint32 {
	if m != nil {
		return m.FlightParachute
	}
	return nil
}

func init() {
	proto.RegisterType((*Proto3)(nil), "prototests.Proto3")
	proto.RegisterType((*SmallMsg3)(nil), "prototests.SmallMsg3")
}
func (this *Proto3) Description() (desc *descriptor.FileDescriptorSet) {
	return Proto3Description()
}
func (this *SmallMsg3) Description() (desc *descriptor.FileDescriptorSet) {
	return Proto3Description()
}
func Proto3Description() (desc *descriptor.FileDescriptorSet) {
	d := &descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3805 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x5d, 0x70, 0x1b, 0xd7,
		0x75, 0x36, 0xfe, 0x48, 0xe0, 0x00, 0x04, 0x97, 0x97, 0x94, 0x04, 0xd1, 0xb1, 0x44, 0xc1, 0x76,
		0x44, 0xdb, 0x0d, 0x95, 0x91, 0x2c, 0xd9, 0x82, 0x9a, 0xb8, 0x20, 0x08, 0x31, 0x70, 0x49, 0x02,
		0x59, 0x90, 0xf1, 0xdf, 0x74, 0x76, 0x2e, 0x17, 0x17, 0xc0, 0x4a, 0x8b, 0xdd, 0xcd, 0xee, 0x42,
		0x32, 0x35, 0x7d, 0x70, 0xc7, 0xfd, 0x99, 0x4c, 0xa7, 0xff, 0xed, 0x34, 0x71, 0x1d, 0xb7, 0xe9,
		0x4c, 0xea, 0x36, 0xfd, 0x4b, 0x9a, 0x36, 0x6d, 0xfa, 0xd4, 0x97, 0xb4, 0x7d, 0xea, 0x4c, 0xde,
		0xfb, 0xd0, 0xb4, 0x9e, 0xe9, 0x9f, 0xdb, 0xa4, 0xad, 0x1f, 0x32, 0xe3, 0x97, 0xce, 0xfd, 0x5b,
		0xec, 0x02, 0x20, 0x17, 0xcc, 0x8c, 0x9d, 0x27, 0x62, 0xcf, 0x3d, 0xdf, 0xb7, 0xe7, 0x9e, 0x7b,
		0xee, 0x39, 0xe7, 0xde, 0x25, 0x7c, 0xf7, 0x26, 0xac, 0xf5, 0x6c, 0xbb, 0x67, 0x92, 0x2b, 0x8e,
		0x6b, 0xfb, 0xf6, 0xe1, 0xb0, 0x7b, 0xa5, 0x43, 0x3c, 0xdd, 0x35, 0x1c, 0xdf, 0x76, 0x37, 0x98,
		0x0c, 0x2d, 0x72, 0x8d, 0x0d, 0xa9, 0x51, 0xde, 0x85, 0xa5, 0xdb, 0x86, 0x49, 0xb6, 0x02, 0xc5,
		0x36, 0xf1, 0xd1, 0xb3, 0x90, 0xee, 0x1a, 0x26, 0x29, 0x25, 0xd6, 0x52, 0xeb, 0xf9, 0xab, 0x8f,
		0x6d, 0x8c, 0x81, 0x36, 0xa2, 0x88, 0x16, 0x15, 0xab, 0x0c, 0x51, 0x7e, 0x27, 0x0d, 0xcb, 0x53,
		0x46, 0x11, 0x82, 0xb4, 0x85, 0x07, 0x94, 0x31, 0xb1, 0x9e, 0x53, 0xd9, 0x6f, 0x54, 0x82, 0x79,
		0x07, 0xeb, 0x77, 0x71, 0x8f, 0x94, 0x92, 0x4c, 0x2c, 0x1f, 0xd1, 0x05, 0x80, 0x0e, 0x71, 0x88,
		0xd5, 0x21, 0x96, 0x7e, 0x54, 0x4a, 0xad, 0xa5, 0xd6, 0x73, 0x6a, 0x48, 0x82, 0x9e, 0x82, 0x25,
		0x67, 0x78, 0x68, 0x1a, 0xba, 0x16, 0x52, 0x83, 0xb5, 0xd4, 0x7a, 0x46, 0x55, 0xf8, 0xc0, 0xd6,
		0x48, 0xf9, 0x32, 0x2c, 0xde, 0x27, 0xf8, 0x6e, 0x58, 0x35, 0xcf, 0x54, 0x8b, 0x54, 0x1c, 0x52,
		0xac, 0x41, 0x61, 0x40, 0x3c, 0x0f, 0xf7, 0x88, 0xe6, 0x1f, 0x39, 0xa4, 0x94, 0x66, 0xb3, 0x5f,
		0x9b, 0x98, 0xfd, 0xf8, 0xcc, 0xf3, 0x02, 0xb5, 0x7f, 0xe4, 0x10, 0x54, 0x85, 0x1c, 0xb1, 0x86,
		0x03, 0xce, 0x90, 0x39, 0xc6, 0x7f, 0x75, 0x6b, 0x38, 0x18, 0x67, 0xc9, 0x52, 0x98, 0xa0, 0x98,
		0xf7, 0x88, 0x7b, 0xcf, 0xd0, 0x49, 0x69, 0x8e, 0x11, 0x5c, 0x9e, 0x20, 0x68, 0xf3, 0xf1, 0x71,
		0x0e, 0x89, 0x43, 0x35, 0xc8, 0x91, 0x57, 0x7d, 0x62, 0x79, 0x86, 0x6d, 0x95, 0xe6, 0x19, 0xc9,
		0xe3, 0x53, 0x56, 0x91, 0x98, 0x9d, 0x71, 0x8a, 0x11, 0x0e, 0xdd, 0x80, 0x79, 0xdb, 0xf1, 0x0d,
		0xdb, 0xf2, 0x4a, 0xd9, 0xb5, 0xc4, 0x7a, 0xfe, 0xea, 0x47, 0xa6, 0x06, 0x42, 0x93, 0xeb, 0xa8,
		0x52, 0x19, 0x35, 0x40, 0xf1, 0xec, 0xa1, 0xab, 0x13, 0x4d, 0xb7, 0x3b, 0x44, 0x33, 0xac, 0xae,
		0x5d, 0xca, 0x31, 0x82, 0x8b, 0x93, 0x13, 0x61, 0x8a, 0x35, 0xbb, 0x43, 0x1a, 0x56, 0xd7, 0x56,
		0x8b, 0x5e, 0xe4, 0x19, 0x9d, 0x85, 0x39, 0xef, 0xc8, 0xf2, 0xf1, 0xab, 0xa5, 0x02, 0x8b, 0x10,
		0xf1, 0x54, 0xfe, 0xe6, 0x1c, 0x2c, 0xce, 0x12, 0x62, 0xb7, 0x20, 0xd3, 0xa5, 0xb3, 0x2c, 0x25,
		0x4f, 0xe3, 0x03, 0x8e, 0x89, 0x3a, 0x71, 0xee, 0x07, 0x74, 0x62, 0x15, 0xf2, 0x16, 0xf1, 0x7c,
		0xd2, 0xe1, 0x11, 0x91, 0x9a, 0x31, 0xa6, 0x80, 0x83, 0x26, 0x43, 0x2a, 0xfd, 0x03, 0x85, 0xd4,
		0x8b, 0xb0, 0x18, 0x98, 0xa4, 0xb9, 0xd8, 0xea, 0xc9, 0xd8, 0xbc, 0x12, 0x67, 0xc9, 0x46, 0x5d,
		0xe2, 0x54, 0x0a, 0x53, 0x8b, 0x24, 0xf2, 0x8c, 0xb6, 0x00, 0x6c, 0x8b, 0xd8, 0x5d, 0xad, 0x43,
		0x74, 0xb3, 0x94, 0x3d, 0xc6, 0x4b, 0x4d, 0xaa, 0x32, 0xe1, 0x25, 0x9b, 0x4b, 0x75, 0x13, 0xdd,
		0x1c, 0x85, 0xda, 0xfc, 0x31, 0x91, 0xb2, 0xcb, 0x37, 0xd9, 0x44, 0xb4, 0x1d, 0x40, 0xd1, 0x25,
		0x34, 0xee, 0x49, 0x47, 0xcc, 0x2c, 0xc7, 0x8c, 0xd8, 0x88, 0x9d, 0x99, 0x2a, 0x60, 0x7c, 0x62,
		0x0b, 0x6e, 0xf8, 0x11, 0x3d, 0x0a, 0x81, 0x40, 0x63, 0x61, 0x05, 0x2c, 0x0b, 0x15, 0xa4, 0x70,
		0x0f, 0x0f, 0xc8, 0xea, 0x03, 0x28, 0x46, 0xdd, 0x83, 0x56, 0x20, 0xe3, 0xf9, 0xd8, 0xf5, 0x59,
		0x14, 0x66, 0x54, 0xfe, 0x80, 0x14, 0x48, 0x11, 0xab, 0xc3, 0xb2, 0x5c, 0x46, 0xa5, 0x3f, 0xd1,
		0x8f, 0x8d, 0x26, 0x9c, 0x62, 0x13, 0xfe, 0xe8, 0xe4, 0x8a, 0x46, 0x98, 0xc7, 0xe7, 0xbd, 0xfa,
		0x0c, 0x2c, 0x44, 0x26, 0x30, 0xeb, 0xab, 0xcb, 0x3f, 0x09, 0x67, 0xa6, 0x52, 0xa3, 0x17, 0x61,
		0x65, 0x68, 0x19, 0x96, 0x4f, 0x5c, 0xc7, 0x25, 0x34, 0x62, 0xf9, 0xab, 0x4a, 0xff, 0x3a, 0x7f,
		0x4c, 0xcc, 0x1d, 0x84, 0xb5, 0x39, 0x8b, 0xba, 0x3c, 0x9c, 0x14, 0x3e, 0x99, 0xcb, 0xfe, 0xdb,
		0xbc, 0xf2, 0xda, 0x6b, 0xaf, 0xbd, 0x96, 0x2c, 0x7f, 0x7e, 0x0e, 0x56, 0xa6, 0xed, 0x99, 0xa9,
		0xdb, 0xf7, 0x2c, 0xcc, 0x59, 0xc3, 0xc1, 0x21, 0x71, 0x99, 0x93, 0x32, 0xaa, 0x78, 0x42, 0x55,
		0xc8, 0x98, 0xf8, 0x90, 0x98, 0xa5, 0xf4, 0x5a, 0x62, 0xbd, 0x78, 0xf5, 0xa9, 0x99, 0x76, 0xe5,
		0xc6, 0x0e, 0x85, 0xa8, 0x1c, 0x89, 0x3e, 0x09, 0x69, 0x91, 0xa2, 0x29, 0xc3, 0x93, 0xb3, 0x31,
		0xd0, 0xbd, 0xa4, 0x32, 0x1c, 0x7a, 0x18, 0x72, 0xf4, 0x2f, 0x8f, 0x8d, 0x39, 0x66, 0x73, 0x96,
		0x0a, 0x68, 0x5c, 0xa0, 0x55, 0xc8, 0xb2, 0x6d, 0xd2, 0x21, 0xb2, 0xb4, 0x05, 0xcf, 0x34, 0xb0,
		0x3a, 0xa4, 0x8b, 0x87, 0xa6, 0xaf, 0xdd, 0xc3, 0xe6, 0x90, 0xb0, 0x80, 0xcf, 0xa9, 0x05, 0x21,
		0xfc, 0x0c, 0x95, 0xa1, 0x8b, 0x90, 0xe7, 0xbb, 0xca, 0xb0, 0x3a, 0xe4, 0x55, 0x96, 0x3d, 0x33,
		0x2a, 0xdf, 0x68, 0x0d, 0x2a, 0xa1, 0xaf, 0xbf, 0xe3, 0xd9, 0x96, 0x0c, 0x4d, 0xf6, 0x0a, 0x2a,
		0x60, 0xaf, 0x7f, 0x66, 0x3c, 0x71, 0x3f, 0x32, 0x7d, 0x7a, 0xe3, 0x31, 0x55, 0xfe, 0x46, 0x12,
		0xd2, 0x2c, 0x5f, 0x2c, 0x42, 0x7e, 0xff, 0xa5, 0x56, 0x5d, 0xdb, 0x6a, 0x1e, 0x6c, 0xee, 0xd4,
		0x95, 0x04, 0x2a, 0x02, 0x30, 0xc1, 0xed, 0x9d, 0x66, 0x75, 0x5f, 0x49, 0x06, 0xcf, 0x8d, 0xbd,
		0xfd, 0x1b, 0x4f, 0x2b, 0xa9, 0x00, 0x70, 0xc0, 0x05, 0xe9, 0xb0, 0xc2, 0xb5, 0xab, 0x4a, 0x06,
		0x29, 0x50, 0xe0, 0x04, 0x8d, 0x17, 0xeb, 0x5b, 0x37, 0x9e, 0x56, 0xe6, 0xa2, 0x92, 0x6b, 0x57,
		0x95, 0x79, 0xb4, 0x00, 0x39, 0x26, 0xd9, 0x6c, 0x36, 0x77, 0x94, 0x6c, 0xc0, 0xd9, 0xde, 0x57,
		0x1b, 0x7b, 0xdb, 0x4a, 0x2e, 0xe0, 0xdc, 0x56, 0x9b, 0x07, 0x2d, 0x05, 0x02, 0x86, 0xdd, 0x7a,
		0xbb, 0x5d, 0xdd, 0xae, 0x2b, 0xf9, 0x40, 0x63, 0xf3, 0xa5, 0xfd, 0x7a, 0x5b, 0x29, 0x44, 0xcc,
		0xba, 0x76, 0x55, 0x59, 0x08, 0x5e, 0x51, 0xdf, 0x3b, 0xd8, 0x55, 0x8a, 0x68, 0x09, 0x16, 0xf8,
		0x2b, 0xa4, 0x11, 0x8b, 0x63, 0xa2, 0x1b, 0x4f, 0x2b, 0xca, 0xc8, 0x10, 0xce, 0xb2, 0x14, 0x11,
		0xdc, 0x78, 0x5a, 0x41, 0xe5, 0x1a, 0x64, 0x58, 0x74, 0x21, 0x04, 0xc5, 0x9d, 0xea, 0x66, 0x7d,
		0x47, 0x6b, 0xb6, 0xf6, 0x1b, 0xcd, 0xbd, 0xea, 0x8e, 0x92, 0x18, 0xc9, 0xd4, 0xfa, 0xa7, 0x0f,
		0x1a, 0x6a, 0x7d, 0x4b, 0x49, 0x86, 0x65, 0xad, 0x7a, 0x75, 0xbf, 0xbe, 0xa5, 0xa4, 0xca, 0x3a,
		0xac, 0x4c, 0xcb, 0x93, 0x53, 0x77, 0x46, 0x68, 0x89, 0x93, 0xc7, 0x2c, 0x31, 0xe3, 0x9a, 0x58,
		0xe2, 0x7f, 0x49, 0xc2, 0xf2, 0x94, 0x5a, 0x31, 0xf5, 0x25, 0xcf, 0x41, 0x86, 0x87, 0x28, 0xaf,
		0x9e, 0x4f, 0x4c, 0x2d, 0x3a, 0x2c, 0x60, 0x27, 0x2a, 0x28, 0xc3, 0x85, 0x3b, 0x88, 0xd4, 0x31,
		0x1d, 0x04, 0xa5, 0x98, 0xc8, 0xe9, 0x3f, 0x31, 0x91, 0xd3, 0x79, 0xd9, 0xbb, 0x31, 0x4b, 0xd9,
		0x63, 0xb2, 0xd3, 0xe5, 0xf6, 0xcc, 0x94, 0xdc, 0x7e, 0x0b, 0x96, 0x26, 0x88, 0x66, 0xce, 0xb1,
		0xaf, 0x27, 0xa0, 0x74, 0x9c, 0x73, 0x62, 0x32, 0x5d, 0x32, 0x92, 0xe9, 0x6e, 0x8d, 0x7b, 0xf0,
		0xd2, 0xf1, 0x8b, 0x30, 0xb1, 0xd6, 0x6f, 0x27, 0xe0, 0xec, 0xf4, 0x4e, 0x71, 0xaa, 0x0d, 0x9f,
		0x84, 0xb9, 0x01, 0xf1, 0xfb, 0xb6, 0xec, 0x96, 0x3e, 0x3a, 0xa5, 0x06, 0xd3, 0xe1, 0xf1, 0xc5,
		0x16, 0xa8, 0x70, 0x11, 0x4f, 0x1d, 0xd7, 0xee, 0x71, 0x6b, 0x26, 0x2c, 0xfd, 0x5c, 0x12, 0xce,
		0x4c, 0x25, 0x9f, 0x6a, 0xe8, 0x23, 0x00, 0x86, 0xe5, 0x0c, 0x7d, 0xde, 0x11, 0xf1, 0x04, 0x9b,
		0x63, 0x12, 0x96, 0xbc, 0x68, 0xf2, 0x1c, 0xfa, 0xc1, 0x78, 0x8a, 0x8d, 0x03, 0x17, 0x31, 0x85,
		0x67, 0x47, 0x86, 0xa6, 0x99, 0xa1, 0x17, 0x8e, 0x99, 0xe9, 0x44, 0x60, 0x7e, 0x1c, 0x14, 0xdd,
		0x34, 0x88, 0xe5, 0x6b, 0x9e, 0xef, 0x12, 0x3c, 0x30, 0xac, 0x1e, 0xab, 0x20, 0xd9, 0x4a, 0xa6,
		0x8b, 0x4d, 0x8f, 0xa8, 0x8b, 0x7c, 0xb8, 0x2d, 0x47, 0x29, 0x82, 0x05, 0x90, 0x1b, 0x42, 0xcc,
		0x45, 0x10, 0x7c, 0x38, 0x40, 0x94, 0xbf, 0x9e, 0x85, 0x7c, 0xa8, 0xaf, 0x46, 0x97, 0xa0, 0x70,
		0x07, 0xdf, 0xc3, 0x9a, 0x3c, 0x2b, 0x71, 0x4f, 0xe4, 0xa9, 0xac, 0x25, 0xce, 0x4b, 0x1f, 0x87,
		0x15, 0xa6, 0x62, 0x0f, 0x7d, 0xe2, 0x6a, 0xba, 0x89, 0x3d, 0x8f, 0x39, 0x2d, 0xcb, 0x54, 0x11,
		0x1d, 0x6b, 0xd2, 0xa1, 0x9a, 0x1c, 0x41, 0xd7, 0x61, 0x99, 0x21, 0x06, 0x43, 0xd3, 0x37, 0x1c,
		0x93, 0x68, 0xf4, 0xf4, 0xe6, 0xb1, 0x4a, 0x12, 0x58, 0xb6, 0x44, 0x35, 0x76, 0x85, 0x02, 0xb5,
		0xc8, 0x43, 0x5b, 0xf0, 0x08, 0x83, 0xf5, 0x88, 0x45, 0x5c, 0xec, 0x13, 0x8d, 0x7c, 0x76, 0x88,
		0x4d, 0x4f, 0xc3, 0x56, 0x47, 0xeb, 0x63, 0xaf, 0x5f, 0x5a, 0xa1, 0x04, 0x9b, 0xc9, 0x52, 0x42,
		0x3d, 0x4f, 0x15, 0xb7, 0x85, 0x5e, 0x9d, 0xa9, 0x55, 0xad, 0xce, 0xa7, 0xb0, 0xd7, 0x47, 0x15,
		0x38, 0xcb, 0x58, 0x3c, 0xdf, 0x35, 0xac, 0x9e, 0xa6, 0xf7, 0x89, 0x7e, 0x57, 0x1b, 0xfa, 0xdd,
		0x67, 0x4b, 0x0f, 0x87, 0xdf, 0xcf, 0x2c, 0x6c, 0x33, 0x9d, 0x1a, 0x55, 0x39, 0xf0, 0xbb, 0xcf,
		0xa2, 0x36, 0x14, 0xe8, 0x62, 0x0c, 0x8c, 0x07, 0x44, 0xeb, 0xda, 0x2e, 0x2b, 0x8d, 0xc5, 0x29,
		0xa9, 0x29, 0xe4, 0xc1, 0x8d, 0xa6, 0x00, 0xec, 0xda, 0x1d, 0x52, 0xc9, 0xb4, 0x5b, 0xf5, 0xfa,
		0x96, 0x9a, 0x97, 0x2c, 0xb7, 0x6d, 0x97, 0x06, 0x54, 0xcf, 0x0e, 0x1c, 0x9c, 0xe7, 0x01, 0xd5,
		0xb3, 0xa5, 0x7b, 0xaf, 0xc3, 0xb2, 0xae, 0xf3, 0x39, 0x1b, 0xba, 0x26, 0xce, 0x58, 0x5e, 0x49,
		0x89, 0x38, 0x4b, 0xd7, 0xb7, 0xb9, 0x82, 0x88, 0x71, 0x0f, 0xdd, 0x84, 0x33, 0x23, 0x67, 0x85,
		0x81, 0x4b, 0x13, 0xb3, 0x1c, 0x87, 0x5e, 0x87, 0x65, 0xe7, 0x68, 0x12, 0x88, 0x22, 0x6f, 0x74,
		0x8e, 0xc6, 0x61, 0xcf, 0xc0, 0x8a, 0xd3, 0x77, 0x26, 0x71, 0x4f, 0x86, 0x71, 0xc8, 0xe9, 0x3b,
		0xe3, 0xc0, 0xc7, 0xd9, 0x81, 0xdb, 0x25, 0x3a, 0xf6, 0x49, 0xa7, 0x74, 0x2e, 0xac, 0x1e, 0x1a,
		0x40, 0x57, 0x40, 0xd1, 0x75, 0x8d, 0x58, 0xf8, 0xd0, 0x24, 0x1a, 0x76, 0x89, 0x85, 0xbd, 0xd2,
		0xc5, 0xb0, 0x72, 0x51, 0xd7, 0xeb, 0x6c, 0xb4, 0xca, 0x06, 0xd1, 0x93, 0xb0, 0x64, 0x1f, 0xde,
		0xd1, 0x79, 0x48, 0x6a, 0x8e, 0x4b, 0xba, 0xc6, 0xab, 0xa5, 0xc7, 0x98, 0x7f, 0x17, 0xe9, 0x00,
		0x0b, 0xc8, 0x16, 0x13, 0xa3, 0x27, 0x40, 0xd1, 0xbd, 0x3e, 0x76, 0x1d, 0x96, 0x93, 0x3d, 0x07,
		0xeb, 0xa4, 0xf4, 0x38, 0x57, 0xe5, 0xf2, 0x3d, 0x29, 0xa6, 0x5b, 0xc2, 0xbb, 0x6f, 0x74, 0x7d,
		0xc9, 0x78, 0x99, 0x6f, 0x09, 0x26, 0x13, 0x6c, 0xeb, 0xa0, 0x50, 0x57, 0x44, 0x5e, 0xbc, 0xce,
		0xd4, 0x8a, 0x4e, 0xdf, 0x09, 0xbf, 0xf7, 0x51, 0x58, 0xa0, 0x9a, 0xa3, 0x97, 0x3e, 0xc1, 0x1b,
		0x32, 0xa7, 0x1f, 0x7a, 0xe3, 0x07, 0xd6, 0x1b, 0x97, 0x2b, 0x50, 0x08, 0xc7, 0x27, 0xca, 0x01,
		0x8f, 0x50, 0x25, 0x41, 0x9b, 0x95, 0x5a, 0x73, 0x8b, 0xb6, 0x19, 0x2f, 0xd7, 0x95, 0x24, 0x6d,
		0x77, 0x76, 0x1a, 0xfb, 0x75, 0x4d, 0x3d, 0xd8, 0xdb, 0x6f, 0xec, 0xd6, 0x95, 0x54, 0xb8, 0xaf,
		0xfe, 0x56, 0x12, 0x8a, 0xd1, 0x23, 0x12, 0xfa, 0x51, 0x38, 0x27, 0xef, 0x33, 0x3c, 0xe2, 0x6b,
		0xf7, 0x0d, 0x97, 0x6d, 0x99, 0x01, 0xe6, 0xe5, 0x2b, 0x58, 0xb4, 0x15, 0xa1, 0xd5, 0x26, 0xfe,
		0x0b, 0x86, 0x4b, 0x37, 0xc4, 0x00, 0xfb, 0x68, 0x07, 0x2e, 0x5a, 0xb6, 0xe6, 0xf9, 0xd8, 0xea,
		0x60, 0xb7, 0xa3, 0x8d, 0x6e, 0x92, 0x34, 0xac, 0xeb, 0xc4, 0xf3, 0x6c, 0x5e, 0xaa, 0x02, 0x96,
		0x8f, 0x58, 0x76, 0x5b, 0x28, 0x8f, 0x72, 0x78, 0x55, 0xa8, 0x8e, 0x05, 0x58, 0xea, 0xb8, 0x00,
		0x7b, 0x18, 0x72, 0x03, 0xec, 0x68, 0xc4, 0xf2, 0xdd, 0x23, 0xd6, 0x18, 0x67, 0xd5, 0xec, 0x00,
		0x3b, 0x75, 0xfa, 0xfc, 0xe1, 0x9c, 0x4f, 0xfe, 0x31, 0x05, 0x85, 0x70, 0x73, 0x4c, 0xcf, 0x1a,
		0x3a, 0xab, 0x23, 0x09, 0x96, 0x69, 0x1e, 0x3d, 0xb1, 0x95, 0xde, 0xa8, 0xd1, 0x02, 0x53, 0x99,
		0xe3, 0x2d, 0xab, 0xca, 0x91, 0xb4, 0xb8, 0xd3, 0xdc, 0x42, 0x78, 0x8b, 0x90, 0x55, 0xc5, 0x13,
		0xda, 0x86, 0xb9, 0x3b, 0x1e, 0xe3, 0x9e, 0x63, 0xdc, 0x8f, 0x9d, 0xcc, 0xfd, 0x7c, 0x9b, 0x91,
		0xe7, 0x9e, 0x6f, 0x6b, 0x7b, 0x4d, 0x75, 0xb7, 0xba, 0xa3, 0x0a, 0x38, 0x3a, 0x0f, 0x69, 0x13,
		0x3f, 0x38, 0x8a, 0x96, 0x22, 0x26, 0x9a, 0xd5, 0xf1, 0xe7, 0x21, 0x7d, 0x9f, 0xe0, 0xbb, 0xd1,
		0x02, 0xc0, 0x44, 0x1f, 0x60, 0xe8, 0x5f, 0x81, 0x0c, 0xf3, 0x17, 0x02, 0x10, 0x1e, 0x53, 0x1e,
		0x42, 0x59, 0x48, 0xd7, 0x9a, 0x2a, 0x0d, 0x7f, 0x05, 0x0a, 0x5c, 0xaa, 0xb5, 0x1a, 0xf5, 0x5a,
		0x5d, 0x49, 0x96, 0xaf, 0xc3, 0x1c, 0x77, 0x02, 0xdd, 0x1a, 0x81, 0x1b, 0x94, 0x87, 0xc4, 0xa3,
		0xe0, 0x48, 0xc8, 0xd1, 0x83, 0xdd, 0xcd, 0xba, 0xaa, 0x24, 0xc3, 0xcb, 0xeb, 0x41, 0x21, 0xdc,
		0x17, 0x7f, 0x38, 0x31, 0xf5, 0xd7, 0x09, 0xc8, 0x87, 0xfa, 0x5c, 0xda, 0xa0, 0x60, 0xd3, 0xb4,
		0xef, 0x6b, 0xd8, 0x34, 0xb0, 0x27, 0x82, 0x02, 0x98, 0xa8, 0x4a, 0x25, 0xb3, 0x2e, 0xda, 0x87,
		0x62, 0xfc, 0x5b, 0x09, 0x50, 0xc6, 0x5b, 0xcc, 0x31, 0x03, 0x13, 0x3f, 0x54, 0x03, 0xdf, 0x4c,
		0x40, 0x31, 0xda, 0x57, 0x8e, 0x99, 0x77, 0xe9, 0x87, 0x6a, 0xde, 0x3f, 0x25, 0x61, 0x21, 0xd2,
		0x4d, 0xce, 0x6a, 0xdd, 0x67, 0x61, 0xc9, 0xe8, 0x90, 0x81, 0x63, 0xfb, 0xc4, 0xd2, 0x8f, 0x34,
		0x93, 0xdc, 0x23, 0x66, 0xa9, 0xcc, 0x12, 0xc5, 0x95, 0x93, 0xfb, 0xd5, 0x8d, 0xc6, 0x08, 0xb7,
		0x43, 0x61, 0x95, 0xe5, 0xc6, 0x56, 0x7d, 0xb7, 0xd5, 0xdc, 0xaf, 0xef, 0xd5, 0x5e, 0xd2, 0x0e,
		0xf6, 0x7e, 0x7c, 0xaf, 0xf9, 0xc2, 0x9e, 0xaa, 0x18, 0x63, 0x6a, 0x1f, 0xe0, 0x56, 0x6f, 0x81,
		0x32, 0x6e, 0x14, 0x3a, 0x07, 0xd3, 0xcc, 0x52, 0x1e, 0x42, 0xcb, 0xb0, 0xb8, 0xd7, 0xd4, 0xda,
		0x8d, 0xad, 0xba, 0x56, 0xbf, 0x7d, 0xbb, 0x5e, 0xdb, 0x6f, 0xf3, 0x1b, 0x88, 0x40, 0x7b, 0x3f,
		0xba, 0xa9, 0xdf, 0x48, 0xc1, 0xf2, 0x14, 0x4b, 0x50, 0x55, 0x9c, 0x1d, 0xf8, 0x71, 0xe6, 0x63,
		0xb3, 0x58, 0xbf, 0x41, 0x4b, 0x7e, 0x0b, 0xbb, 0xbe, 0x38, 0x6a, 0x3c, 0x01, 0xd4, 0x4b, 0x96,
		0x6f, 0x74, 0x0d, 0xe2, 0x8a, 0x0b, 0x1b, 0x7e, 0xa0, 0x58, 0x1c, 0xc9, 0xf9, 0x9d, 0xcd, 0x8f,
		0x00, 0x72, 0x6c, 0xcf, 0xf0, 0x8d, 0x7b, 0x44, 0x33, 0x2c, 0x79, 0xbb, 0x43, 0x0f, 0x18, 0x69,
		0x55, 0x91, 0x23, 0x0d, 0xcb, 0x0f, 0xb4, 0x2d, 0xd2, 0xc3, 0x63, 0xda, 0x34, 0x81, 0xa7, 0x54,
		0x45, 0x8e, 0x04, 0xda, 0x97, 0xa0, 0xd0, 0xb1, 0x87, 0xb4, 0xeb, 0xe2, 0x7a, 0xb4, 0x5e, 0x24,
		0xd4, 0x3c, 0x97, 0x05, 0x2a, 0xa2, 0x9f, 0x1e, 0x5d, 0x2b, 0x15, 0xd4, 0x3c, 0x97, 0x71, 0x95,
		0xcb, 0xb0, 0x88, 0x7b, 0x3d, 0x97, 0x92, 0x4b, 0x22, 0x7e, 0x42, 0x28, 0x06, 0x62, 0xa6, 0xb8,
		0xfa, 0x3c, 0x64, 0xa5, 0x1f, 0x68, 0x49, 0xa6, 0x9e, 0xd0, 0x1c, 0x7e, 0xec, 0x4d, 0xae, 0xe7,
		0xd4, 0xac, 0x25, 0x07, 0x2f, 0x41, 0xc1, 0xf0, 0xb4, 0xd1, 0x2d, 0x79, 0x72, 0x2d, 0xb9, 0x9e,
		0x55, 0xf3, 0x86, 0x17, 0xdc, 0x30, 0x96, 0xdf, 0x4e, 0x42, 0x31, 0x7a, 0xcb, 0x8f, 0xb6, 0x20,
		0x6b, 0xda, 0x3a, 0x66, 0xa1, 0xc5, 0x3f, 0x31, 0xad, 0xc7, 0x7c, 0x18, 0xd8, 0xd8, 0x11, 0xfa,
		0x6a, 0x80, 0x5c, 0xfd, 0x87, 0x04, 0x64, 0xa5, 0x18, 0x9d, 0x85, 0xb4, 0x83, 0xfd, 0x3e, 0xa3,
		0xcb, 0x6c, 0x26, 0x95, 0x84, 0xca, 0x9e, 0xa9, 0xdc, 0x73, 0xb0, 0xc5, 0x42, 0x40, 0xc8, 0xe9,
		0x33, 0x5d, 0x57, 0x93, 0xe0, 0x0e, 0x3b, 0x7e, 0xd8, 0x83, 0x01, 0xb1, 0x7c, 0x4f, 0xae, 0xab,
		0x90, 0xd7, 0x84, 0x18, 0x3d, 0x05, 0x4b, 0xbe, 0x8b, 0x0d, 0x33, 0xa2, 0x9b, 0x66, 0xba, 0x8a,
		0x1c, 0x08, 0x94, 0x2b, 0x70, 0x5e, 0xf2, 0x76, 0x88, 0x8f, 0xf5, 0x3e, 0xe9, 0x8c, 0x40, 0x73,
		0xec, 0x9a, 0xe1, 0x9c, 0x50, 0xd8, 0x12, 0xe3, 0x12, 0x5b, 0xfe, 0x76, 0x02, 0x96, 0xe4, 0x81,
		0xa9, 0x13, 0x38, 0x6b, 0x17, 0x00, 0x5b, 0x96, 0xed, 0x87, 0xdd, 0x35, 0x19, 0xca, 0x13, 0xb8,
		0x8d, 0x6a, 0x00, 0x52, 0x43, 0x04, 0xab, 0x03, 0x80, 0xd1, 0xc8, 0xb1, 0x6e, 0xbb, 0x08, 0x79,
		0xf1, 0x09, 0x87, 0x7d, 0x07, 0xe4, 0x47, 0x6c, 0xe0, 0x22, 0x7a, 0xb2, 0x42, 0x2b, 0x90, 0x39,
		0x24, 0x3d, 0xc3, 0x12, 0x17, 0xb3, 0xfc, 0x41, 0x5e, 0x84, 0xa4, 0x83, 0x8b, 0x90, 0xcd, 0x57,
		0x60, 0x59, 0xb7, 0x07, 0xe3, 0xe6, 0x6e, 0x2a, 0x63, 0xc7, 0x7c, 0xef, 0x53, 0x89, 0x97, 0x61,
		0xd4, 0x62, 0x7e, 0x3f, 0x91, 0xf8, 0xdd, 0x64, 0x6a, 0xbb, 0xb5, 0xf9, 0x95, 0xe4, 0xea, 0x36,
		0x87, 0xb6, 0xe4, 0x4c, 0x55, 0xd2, 0x35, 0x89, 0x4e, 0xad, 0x87, 0x2f, 0xaf, 0xc3, 0xc7, 0x7a,
		0x86, 0xdf, 0x1f, 0x1e, 0x6e, 0xe8, 0xf6, 0xe0, 0x4a, 0xcf, 0xee, 0xd9, 0xa3, 0x4f, 0x9f, 0xf4,
		0x89, 0x3d, 0xb0, 0x5f, 0xe2, 0xf3, 0x67, 0x2e, 0x90, 0xae, 0xc6, 0x7e, 0x2b, 0xad, 0xec, 0xc1,
		0xb2, 0x50, 0xd6, 0xd8, 0xf7, 0x17, 0x7e, 0x8a, 0x40, 0x27, 0xde, 0x61, 0x95, 0xbe, 0xf6, 0x0e,
		0x2b, 0xd7, 0xea, 0x92, 0x80, 0xd2, 0x31, 0x7e, 0xd0, 0xa8, 0xa8, 0x70, 0x26, 0xc2, 0xc7, 0xb7,
		0x26, 0x71, 0x63, 0x18, 0xbf, 0x25, 0x18, 0x97, 0x43, 0x8c, 0x6d, 0x01, 0xad, 0xd4, 0x60, 0xe1,
		0x34, 0x5c, 0x7f, 0x2b, 0xb8, 0x0a, 0x24, 0x4c, 0xb2, 0x0d, 0x8b, 0x8c, 0x44, 0x1f, 0x7a, 0xbe,
		0x3d, 0x60, 0x79, 0xef, 0x64, 0x9a, 0xbf, 0x7b, 0x87, 0xef, 0x95, 0x22, 0x85, 0xd5, 0x02, 0x54,
		0xa5, 0x02, 0xec, 0x93, 0x53, 0x87, 0xe8, 0x66, 0x0c, 0xc3, 0xdf, 0x0b, 0x43, 0x02, 0xfd, 0xca,
		0x67, 0x60, 0x85, 0xfe, 0x66, 0x69, 0x29, 0x6c, 0x49, 0xfc, 0x85, 0x57, 0xe9, 0xdb, 0xaf, 0xf3,
		0xed, 0xb8, 0x1c, 0x10, 0x84, 0x6c, 0x0a, 0xad, 0x62, 0x8f, 0xf8, 0x3e, 0x71, 0x3d, 0x0d, 0x9b,
		0xd3, 0xcc, 0x0b, 0xdd, 0x18, 0x94, 0xbe, 0xf0, 0x6e, 0x74, 0x15, 0xb7, 0x39, 0xb2, 0x6a, 0x9a,
		0x95, 0x03, 0x38, 0x37, 0x25, 0x2a, 0x66, 0xe0, 0x7c, 0x43, 0x70, 0xae, 0x4c, 0x44, 0x06, 0xa5,
		0x6d, 0x81, 0x94, 0x07, 0x6b, 0x39, 0x03, 0xe7, 0x6f, 0x09, 0x4e, 0x24, 0xb0, 0x72, 0x49, 0x29,
		0xe3, 0xf3, 0xb0, 0x74, 0x8f, 0xb8, 0x87, 0xb6, 0x27, 0x6e, 0x69, 0x66, 0xa0, 0x7b, 0x53, 0xd0,
		0x2d, 0x0a, 0x20, 0xbb, 0xb6, 0xa1, 0x5c, 0x37, 0x21, 0xdb, 0xc5, 0x3a, 0x99, 0x81, 0xe2, 0x8b,
		0x82, 0x62, 0x9e, 0xea, 0x53, 0x68, 0x15, 0x0a, 0x3d, 0x5b, 0x54, 0xa6, 0x78, 0xf8, 0x5b, 0x02,
		0x9e, 0x97, 0x18, 0x41, 0xe1, 0xd8, 0xce, 0xd0, 0xa4, 0x65, 0x2b, 0x9e, 0xe2, 0xb7, 0x25, 0x85,
		0xc4, 0x08, 0x8a, 0x53, 0xb8, 0xf5, 0x77, 0x24, 0x85, 0x17, 0xf2, 0xe7, 0x73, 0x90, 0xb7, 0x2d,
		0xf3, 0xc8, 0xb6, 0x66, 0x31, 0xe2, 0x4b, 0x82, 0x01, 0x04, 0x84, 0x12, 0xdc, 0x82, 0xdc, 0xac,
		0x0b, 0xf1, 0xe5, 0x77, 0xe5, 0xf6, 0x90, 0x2b, 0xb0, 0x0d, 0x8b, 0x32, 0x41, 0x19, 0xb6, 0x35,
		0x03, 0xc5, 0xef, 0x09, 0x8a, 0x62, 0x08, 0x26, 0xa6, 0xe1, 0x13, 0xcf, 0xef, 0x91, 0x59, 0x48,
		0xde, 0x96, 0xd3, 0x10, 0x10, 0xe1, 0xca, 0x43, 0x62, 0xe9, 0xfd, 0xd9, 0x18, 0x7e, 0x5f, 0xba,
		0x52, 0x62, 0x28, 0x45, 0x0d, 0x16, 0x06, 0xd8, 0xf5, 0xfa, 0xd8, 0x9c, 0x69, 0x39, 0xfe, 0x40,
		0x70, 0x14, 0x02, 0x90, 0xf0, 0xc8, 0xd0, 0x3a, 0x0d, 0xcd, 0x57, 0xa4, 0x47, 0x42, 0x30, 0xb1,
		0xf5, 0x3c, 0x9f, 0x5d, 0x69, 0x9d, 0x86, 0xed, 0x0f, 0xe5, 0xd6, 0xe3, 0xd8, 0xdd, 0x30, 0xe3,
		0x2d, 0xc8, 0x79, 0xc6, 0x83, 0x99, 0x68, 0xfe, 0x48, 0xae, 0x34, 0x03, 0x50, 0xf0, 0x4b, 0x70,
		0x7e, 0x6a, 0x99, 0x98, 0x81, 0xec, 0x8f, 0x05, 0xd9, 0xd9, 0x29, 0xa5, 0x42, 0xa4, 0x84, 0xd3,
		0x52, 0xfe, 0x89, 0x4c, 0x09, 0x64, 0x8c, 0xab, 0x45, 0xcf, 0x0a, 0x1e, 0xee, 0x9e, 0xce, 0x6b,
		0x7f, 0x2a, 0xbd, 0xc6, 0xb1, 0x11, 0xaf, 0xed, 0xc3, 0x59, 0xc1, 0x78, 0xba, 0x75, 0xfd, 0xaa,
		0x4c, 0xac, 0x1c, 0x7d, 0x10, 0x5d, 0xdd, 0x57, 0x60, 0x35, 0x70, 0xa7, 0x6c, 0x4a, 0x3d, 0x6d,
		0x80, 0x9d, 0x19, 0x98, 0xbf, 0x26, 0x98, 0x65, 0xc6, 0x0f, 0xba, 0x5a, 0x6f, 0x17, 0x3b, 0x94,
		0xfc, 0x45, 0x28, 0x49, 0xf2, 0xa1, 0xe5, 0x12, 0xdd, 0xee, 0x59, 0xc6, 0x03, 0xd2, 0x99, 0x81,
		0xfa, 0xcf, 0xc6, 0x96, 0xea, 0x20, 0x04, 0xa7, 0xcc, 0x0d, 0x50, 0x82, 0x5e, 0x45, 0x33, 0x06,
		0x8e, 0xed, 0xfa, 0x31, 0x8c, 0x5f, 0x97, 0x2b, 0x15, 0xe0, 0x1a, 0x0c, 0x56, 0xa9, 0x43, 0x91,
		0x3d, 0xce, 0x1a, 0x92, 0x7f, 0x2e, 0x88, 0x16, 0x46, 0x28, 0x91, 0x38, 0x74, 0x7b, 0xe0, 0x60,
		0x77, 0x96, 0xfc, 0xf7, 0x17, 0x32, 0x71, 0x08, 0x88, 0x48, 0x1c, 0xfe, 0x91, 0x43, 0x68, 0xb5,
		0x9f, 0x81, 0xe1, 0x1b, 0x32, 0x71, 0x48, 0x8c, 0xa0, 0x90, 0x0d, 0xc3, 0x0c, 0x14, 0x7f, 0x29,
		0x29, 0x24, 0x86, 0x52, 0x7c, 0x7a, 0x54, 0x68, 0x5d, 0xd2, 0x33, 0x3c, 0xdf, 0xe5, 0xad, 0xf0,
		0xc9, 0x54, 0x7f, 0xf5, 0x6e, 0xb4, 0x09, 0x53, 0x43, 0x50, 0x9a, 0x89, 0xc4, 0x15, 0x2a, 0x3b,
		0x29, 0xc5, 0x1b, 0xf6, 0x4d, 0x99, 0x89, 0x42, 0x30, 0xbe, 0x3f, 0x17, 0xc7, 0x7a, 0x15, 0x14,
		0xf7, 0x8f, 0x30, 0xa5, 0x9f, 0x7a, 0x4f, 0x70, 0x45, 0x5b, 0x95, 0xca, 0x0e, 0x0d, 0xa0, 0x68,
		0x43, 0x11, 0x4f, 0xf6, 0xfa, 0x7b, 0x41, 0x0c, 0x45, 0xfa, 0x89, 0xca, 0x6d, 0x58, 0x88, 0x34,
		0x13, 0xf1, 0x54, 0x3f, 0x2d, 0xa8, 0x0a, 0xe1, 0x5e, 0xa2, 0x72, 0x1d, 0xd2, 0xb4, 0x31, 0x88,
		0x87, 0xff, 0x8c, 0x80, 0x33, 0xf5, 0xca, 0x27, 0x20, 0x2b, 0x1b, 0x82, 0x78, 0xe8, 0xcf, 0x0a,
		0x68, 0x00, 0xa1, 0x70, 0xd9, 0x0c, 0xc4, 0xc3, 0x7f, 0x4e, 0xc2, 0x25, 0x84, 0xc2, 0x67, 0x77,
		0xe1, 0xdf, 0xfc, 0x7c, 0x5a, 0x24, 0x74, 0xe9, 0xbb, 0x5b, 0x30, 0x2f, 0xba, 0x80, 0x78, 0xf4,
		0xe7, 0xc4, 0xcb, 0x25, 0xa2, 0xf2, 0x0c, 0x64, 0x66, 0x74, 0xf8, 0x2f, 0x08, 0x28, 0xd7, 0xaf,
		0xd4, 0x20, 0x1f, 0xaa, 0xfc, 0xf1, 0xf0, 0x5f, 0x14, 0xf0, 0x30, 0x8a, 0x9a, 0x2e, 0x2a, 0x7f,
		0x3c, 0xc1, 0x2f, 0x49, 0xd3, 0x05, 0x82, 0xba, 0x4d, 0x16, 0xfd, 0x78, 0xf4, 0x2f, 0x4b, 0xaf,
		0x4b, 0x48, 0xe5, 0x39, 0xc8, 0x05, 0x89, 0x3c, 0x1e, 0xff, 0x2b, 0x02, 0x3f, 0xc2, 0x50, 0x0f,
		0x84, 0x0a, 0x49, 0x3c, 0xc5, 0xaf, 0x4a, 0x0f, 0x84, 0x50, 0x74, 0x1b, 0x8d, 0x37, 0x07, 0xf1,
		0x4c, 0xbf, 0x26, 0xb7, 0xd1, 0x58, 0x6f, 0x40, 0x57, 0x93, 0xe5, 0xd3, 0x78, 0x8a, 0x5f, 0x97,
		0xab, 0xc9, 0xf4, 0xa9, 0x19, 0xe3, 0xd5, 0x36, 0x9e, 0xe3, 0x37, 0xa5, 0x19, 0x63, 0xc5, 0xb6,
		0xd2, 0x02, 0x34, 0x59, 0x69, 0xe3, 0xf9, 0x3e, 0x2f, 0xf8, 0x96, 0x26, 0x0a, 0x6d, 0xe5, 0x05,
		0x38, 0x3b, 0xbd, 0xca, 0xc6, 0xb3, 0x7e, 0xe1, 0xbd, 0xb1, 0x73, 0x51, 0xb8, 0xc8, 0x56, 0xf6,
		0x47, 0xe9, 0x3a, 0x5c, 0x61, 0xe3, 0x69, 0xdf, 0x78, 0x2f, 0x9a, 0xb1, 0xc3, 0x05, 0xb6, 0x52,
		0x05, 0x18, 0x15, 0xb7, 0x78, 0xae, 0x37, 0x05, 0x57, 0x08, 0x44, 0xb7, 0x86, 0xa8, 0x6d, 0xf1,
		0xf8, 0x2f, 0xca, 0xad, 0x21, 0x10, 0x74, 0x6b, 0xc8, 0xb2, 0x16, 0x8f, 0x7e, 0x4b, 0x6e, 0x0d,
		0x09, 0xa1, 0x91, 0x1d, 0xaa, 0x1c, 0xf1, 0x0c, 0x5f, 0x92, 0x91, 0x1d, 0x42, 0x55, 0x6e, 0x41,
		0xd6, 0x1a, 0x9a, 0x26, 0x0d, 0x50, 0x74, 0xf2, 0x3f, 0x88, 0x95, 0xfe, 0xfd, 0x7d, 0x61, 0x81,
		0x04, 0x54, 0xae, 0x43, 0x86, 0x0c, 0x0e, 0x49, 0x27, 0x0e, 0xf9, 0x1f, 0xef, 0xcb, 0xa4, 0x44,
		0xb5, 0x2b, 0xcf, 0x01, 0xf0, 0xa3, 0x3d, 0xfb, 0x6c, 0x15, 0x83, 0xfd, 0xcf, 0xf7, 0xc5, 0xbf,
		0x6e, 0x8c, 0x20, 0x23, 0x02, 0xfe, 0x8f, 0x20, 0x27, 0x13, 0xbc, 0x1b, 0x25, 0x60, 0xb3, 0xbe,
		0x09, 0xf3, 0x77, 0x3c, 0xdb, 0xf2, 0x71, 0x2f, 0x0e, 0xfd, 0x5f, 0x02, 0x2d, 0xf5, 0xa9, 0xc3,
		0x06, 0xb6, 0x4b, 0x7c, 0xdc, 0xf3, 0xe2, 0xb0, 0xff, 0x2d, 0xb0, 0x01, 0x80, 0x82, 0x75, 0xec,
		0xf9, 0xb3, 0xcc, 0xfb, 0xbb, 0x12, 0x2c, 0x01, 0xd4, 0x68, 0xfa, 0xfb, 0x2e, 0x39, 0x8a, 0xc3,
		0x7e, 0x4f, 0x1a, 0x2d, 0xf4, 0x2b, 0x9f, 0x80, 0x1c, 0xfd, 0xc9, 0xff, 0x1f, 0x2b, 0x06, 0xfc,
		0x3f, 0x02, 0x3c, 0x42, 0xd0, 0x37, 0x7b, 0x7e, 0xc7, 0x37, 0xe2, 0x9d, 0xfd, 0xbf, 0x62, 0xa5,
		0xa5, 0x7e, 0xa5, 0x0a, 0x79, 0xcf, 0xef, 0x74, 0x86, 0xa2, 0xbf, 0x8a, 0x81, 0xff, 0xdf, 0xfb,
		0xc1, 0x91, 0x3b, 0xc0, 0x6c, 0xd6, 0xa7, 0xdf, 0x1e, 0xc2, 0xb6, 0xbd, 0x6d, 0xf3, 0x7b, 0xc3,
		0x97, 0xcb, 0xf1, 0x17, 0x80, 0xf0, 0x1b, 0x49, 0x28, 0xb0, 0x5f, 0xd7, 0xc4, 0x35, 0x20, 0xdf,
		0xc7, 0xb4, 0x4e, 0x79, 0xab, 0xa7, 0xbb, 0x41, 0x2c, 0xbf, 0x02, 0x73, 0xec, 0xcd, 0xd7, 0xd0,
		0x0a, 0x64, 0xd8, 0x0c, 0xd8, 0xe7, 0xaf, 0x94, 0xca, 0x1f, 0xd0, 0x65, 0x48, 0xed, 0x7a, 0x3d,
		0xf1, 0x0f, 0x50, 0x67, 0x36, 0x46, 0x2f, 0xda, 0x68, 0x0f, 0xb0, 0x69, 0xee, 0x7a, 0xbd, 0x6b,
		0x2a, 0xd5, 0x40, 0x08, 0xd2, 0x0d, 0x7e, 0x93, 0x9c, 0x5a, 0x4f, 0xa9, 0xec, 0x77, 0xf9, 0x05,
		0xc8, 0x05, 0x5a, 0x68, 0x0d, 0xf2, 0x6d, 0x1d, 0xbb, 0x9b, 0x43, 0xaf, 0xed, 0xdb, 0x8e, 0xfc,
		0xb7, 0x9f, 0x90, 0x08, 0xad, 0xc3, 0xe2, 0x6d, 0xd3, 0xe8, 0xf5, 0xfd, 0x16, 0x76, 0xb1, 0xde,
		0x1f, 0xfa, 0xa4, 0x54, 0x58, 0x4b, 0xad, 0xcf, 0xab, 0xe3, 0xe2, 0xcd, 0xc2, 0xf7, 0xbe, 0x73,
		0x21, 0xf1, 0xfd, 0xef, 0x5c, 0x48, 0x7c, 0xf5, 0x9f, 0x2f, 0x24, 0x0e, 0xe7, 0xb8, 0x33, 0xfe,
		0x3f, 0x00, 0x00, 0xff, 0xff, 0x02, 0xff, 0xbc, 0x1e, 0x32, 0x32, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Proto3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&prototests.Proto3{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "Ints: "+fmt.Sprintf("%#v", this.Ints)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SmallMsg3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&prototests.SmallMsg3{")
	s = append(s, "ScarBusStop: "+fmt.Sprintf("%#v", this.ScarBusStop)+",\n")
	s = append(s, "FlightParachute: "+fmt.Sprintf("%#v", this.FlightParachute)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProto3(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedProto3(r randyProto3, easy bool) *Proto3 {
	this := &Proto3{}
	this.Field = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field *= -1
	}
	if r.Intn(10) != 0 {
		this.Msg = NewPopulatedSmallMsg3(r, easy)
	}
	v1 := r.Intn(10)
	this.Ints = make([]int64, v1)
	for i := 0; i < v1; i++ {
		this.Ints[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.Ints[i] *= -1
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSmallMsg3(r randyProto3, easy bool) *SmallMsg3 {
	this := &SmallMsg3{}
	this.ScarBusStop = string(randStringProto3(r))
	v2 := r.Intn(10)
	this.FlightParachute = make([]uint32, v2)
	for i := 0; i < v2; i++ {
		this.FlightParachute[i] = uint32(r.Uint32())
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyProto3 interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneProto3(r randyProto3) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringProto3(r randyProto3) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneProto3(r)
	}
	return string(tmps)
}
func randUnrecognizedProto3(r randyProto3, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldProto3(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldProto3(dAtA []byte, r randyProto3, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateProto3(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateProto3(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateProto3(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateProto3(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateProto3(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateProto3(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateProto3(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}

func init() { proto.RegisterFile("proto3.proto", fileDescriptorProto3) }

var fileDescriptorProto3 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0x37, 0xd6, 0x03, 0x53, 0x42, 0x5c, 0x60, 0xaa, 0x24, 0xb5, 0xb8, 0xa4, 0x58, 0x4a, 0x37,
	0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x3d, 0x3f, 0x3d, 0x5f, 0x1f,
	0x2c, 0x97, 0x54, 0x9a, 0x06, 0xe6, 0x81, 0x39, 0x60, 0x16, 0x44, 0xab, 0x52, 0x34, 0x17, 0x5b,
	0x00, 0xd8, 0x28, 0x21, 0x11, 0x2e, 0x56, 0xb7, 0xcc, 0xd4, 0x9c, 0x14, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0xe6, 0x20, 0x08, 0x47, 0x48, 0x9d, 0x8b, 0xd9, 0xb7, 0x38, 0x5d, 0x82, 0x59, 0x81, 0x51,
	0x83, 0xdb, 0x48, 0x54, 0x0f, 0x61, 0x91, 0x5e, 0x70, 0x6e, 0x62, 0x4e, 0x8e, 0x6f, 0x71, 0xba,
	0x71, 0x10, 0x48, 0x85, 0x90, 0x10, 0x17, 0x8b, 0x67, 0x5e, 0x49, 0xb1, 0x04, 0x8b, 0x02, 0xb3,
	0x06, 0x73, 0x10, 0x98, 0xad, 0x14, 0xce, 0xc5, 0x09, 0x57, 0x25, 0xa4, 0xc0, 0xc5, 0x1d, 0x9c,
	0x9c, 0x58, 0xe4, 0x54, 0x5a, 0x1c, 0x5c, 0x92, 0x5f, 0x00, 0xb6, 0x85, 0x33, 0x08, 0x59, 0x48,
	0x48, 0x83, 0x8b, 0xdf, 0x2d, 0x27, 0x33, 0x3d, 0xa3, 0x24, 0x20, 0xb1, 0x28, 0x31, 0x39, 0xa3,
	0xb4, 0x24, 0x55, 0x82, 0x47, 0x81, 0x59, 0x83, 0x3d, 0x08, 0x5d, 0xd8, 0x89, 0xe7, 0xc3, 0x43,
	0x39, 0xc6, 0x1f, 0x0f, 0xe5, 0x18, 0x37, 0x3c, 0x92, 0x63, 0x4c, 0x62, 0x83, 0x04, 0x06, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x90, 0xfb, 0x93, 0xeb, 0x15, 0x01, 0x00, 0x00,
}
